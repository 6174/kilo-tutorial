~~~ step: main
diff --git a/kilo.c b/kilo.c
new file mode 100644
--- /dev/null
+++ b/kilo.c
@@ -0,0 +1,3 @@
+int main() {
+  return 0;
+}

~~~ step: makefile
diff --git a/Makefile b/Makefile
new file mode 100644
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,2 @@
+kilo: kilo.c
+	$(CC) kilo.c -o kilo -Wall -Wextra -pedantic -std=c99

~~~ step: canonical
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -1,3 +1,7 @@
+#include <unistd.h>
+
 int main() {
+  char c;
+  while (read(STDIN_FILENO, &c, 1) == 1);
   return 0;
 }

~~~ step: press-q
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -2,6 +2,6 @@
 
 int main() {
   char c;
-  while (read(STDIN_FILENO, &c, 1) == 1);
+  while (read(STDIN_FILENO, &c, 1) == 1 && c != 'q');
   return 0;
 }

~~~ step: echo
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -1,6 +1,19 @@
+#include <termios.h>
 #include <unistd.h>
 
+void enableRawMode() {
+  struct termios raw;
+
+  tcgetattr(STDIN_FILENO, &raw);
+
+  raw.c_lflag &= ~(ECHO);
+
+  tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
+}
+
 int main() {
+  enableRawMode();
+
   char c;
   while (read(STDIN_FILENO, &c, 1) == 1 && c != 'q');
   return 0;

~~~ step: atexit
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -1,11 +1,18 @@
+#include <stdlib.h>
 #include <termios.h>
 #include <unistd.h>
 
+struct termios orig_termios;
+
+void disableRawMode() {
+  tcsetattr(STDIN_FILENO, TCSAFLUSH, &orig_termios);
+}
+
 void enableRawMode() {
-  struct termios raw;
-
-  tcgetattr(STDIN_FILENO, &raw);
+  tcgetattr(STDIN_FILENO, &orig_termios);
+  atexit(disableRawMode);
 
+  struct termios raw = orig_termios;
   raw.c_lflag &= ~(ECHO);
 
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);

~~~ step: canonical-off
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -13,7 +13,7 @@ void enableRawMode() {
   atexit(disableRawMode);
 
   struct termios raw = orig_termios;
-  raw.c_lflag &= ~(ECHO);
+  raw.c_lflag &= ~(ECHO | ICANON);
 
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
 }

~~~ step: keypresses
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -1,3 +1,5 @@
+#include <ctype.h>
+#include <stdio.h>
 #include <stdlib.h>
 #include <termios.h>
 #include <unistd.h>
@@ -22,6 +24,13 @@ int main() {
   enableRawMode();
 
   char c;
-  while (read(STDIN_FILENO, &c, 1) == 1 && c != 'q');
+  while (read(STDIN_FILENO, &c, 1) == 1 && c != 'q') {
+    if (isprint(c)) {
+      printf("%d ('%c')\n", c, c);
+    } else {
+      printf("%d\n", c);
+    }
+  }
+
   return 0;
 }

~~~ step: isig
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -15,7 +15,7 @@ void enableRawMode() {
   atexit(disableRawMode);
 
   struct termios raw = orig_termios;
-  raw.c_lflag &= ~(ECHO | ICANON);
+  raw.c_lflag &= ~(ECHO | ICANON | ISIG);
 
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
 }

~~~ step: ixon
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -15,6 +15,7 @@ void enableRawMode() {
   atexit(disableRawMode);
 
   struct termios raw = orig_termios;
+  raw.c_iflag &= ~(IXON);
   raw.c_lflag &= ~(ECHO | ICANON | ISIG);
 
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);

~~~ step: ctrl-m
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -15,7 +15,7 @@ void enableRawMode() {
   atexit(disableRawMode);
 
   struct termios raw = orig_termios;
-  raw.c_iflag &= ~(IXON);
+  raw.c_iflag &= ~(ICRNL | IXON);
   raw.c_lflag &= ~(ECHO | ICANON | ISIG);
 
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);

~~~ step: opost
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -16,6 +16,7 @@ void enableRawMode() {
 
   struct termios raw = orig_termios;
   raw.c_iflag &= ~(ICRNL | IXON);
+  raw.c_oflag &= ~(OPOST);
   raw.c_lflag &= ~(ECHO | ICANON | ISIG);
 
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
@@ -27,9 +28,9 @@ int main() {
   char c;
   while (read(STDIN_FILENO, &c, 1) == 1 && c != 'q') {
     if (isprint(c)) {
-      printf("%d ('%c')\n", c, c);
+      printf("%d ('%c')\r\n", c, c);
     } else {
-      printf("%d\n", c);
+      printf("%d\r\n", c);
     }
   }
 

~~~ step: misc-flags
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -15,8 +15,9 @@ void enableRawMode() {
   atexit(disableRawMode);
 
   struct termios raw = orig_termios;
-  raw.c_iflag &= ~(ICRNL | IXON);
+  raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);
   raw.c_oflag &= ~(OPOST);
+  raw.c_cflag |= (CS8);
   raw.c_lflag &= ~(ECHO | ICANON | ISIG);
 
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);

~~~ step: iexten
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -18,7 +18,7 @@ void enableRawMode() {
   raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);
   raw.c_oflag &= ~(OPOST);
   raw.c_cflag |= (CS8);
-  raw.c_lflag &= ~(ECHO | ICANON | ISIG);
+  raw.c_lflag &= ~(ECHO | ICANON | IEXTEN | ISIG);
 
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
 }

~~~ step: vmin-vtime
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -19,6 +19,8 @@ void enableRawMode() {
   raw.c_oflag &= ~(OPOST);
   raw.c_cflag |= (CS8);
   raw.c_lflag &= ~(ECHO | ICANON | IEXTEN | ISIG);
+  raw.c_cc[VMIN] = 0;
+  raw.c_cc[VTIME] = 1;
 
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
 }
@@ -26,13 +28,15 @@ void enableRawMode() {
 int main() {
   enableRawMode();
 
-  char c;
-  while (read(STDIN_FILENO, &c, 1) == 1 && c != 'q') {
+  while (1) {
+    char c = '\0';
+    read(STDIN_FILENO, &c, 1);
     if (isprint(c)) {
       printf("%d ('%c')\r\n", c, c);
     } else {
       printf("%d\r\n", c);
     }
+    if (c == 'q') break;
   }
 
   return 0;

~~~ step: die
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -6,6 +6,11 @@
 
 struct termios orig_termios;
 
+void die(const char *s) {
+  perror(s);
+  exit(1);
+}
+
 void disableRawMode() {
   tcsetattr(STDIN_FILENO, TCSAFLUSH, &orig_termios);
 }

~~~ step: error-handling
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -12,11 +12,12 @@ void die(const char *s) {
 }
 
 void disableRawMode() {
-  tcsetattr(STDIN_FILENO, TCSAFLUSH, &orig_termios);
+  if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &orig_termios) == -1)
+    die("tcsetattr");
 }
 
 void enableRawMode() {
-  tcgetattr(STDIN_FILENO, &orig_termios);
+  if (tcgetattr(STDIN_FILENO, &orig_termios) == -1) die("tcgetattr");
   atexit(disableRawMode);
 
   struct termios raw = orig_termios;
@@ -27,7 +28,7 @@ void enableRawMode() {
   raw.c_cc[VMIN] = 0;
   raw.c_cc[VTIME] = 1;
 
-  tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw);
+  if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw) == -1) die("tcsetattr");
 }
 
 int main() {
@@ -35,7 +36,7 @@ int main() {
 
   while (1) {
     char c = '\0';
-    read(STDIN_FILENO, &c, 1);
+    if (read(STDIN_FILENO, &c, 1) == -1) die("read");
     if (isprint(c)) {
       printf("%d ('%c')\r\n", c, c);
     } else {

~~~ step: sections
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -1,11 +1,17 @@
+/*** includes ***/
+
 #include <ctype.h>
 #include <stdio.h>
 #include <stdlib.h>
 #include <termios.h>
 #include <unistd.h>
 
+/*** data ***/
+
 struct termios orig_termios;
 
+/*** terminal ***/
+
 void die(const char *s) {
   perror(s);
   exit(1);
@@ -31,6 +37,8 @@ void enableRawMode() {
   if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw) == -1) die("tcsetattr");
 }
 
+/*** init ***/
+
 int main() {
   enableRawMode();
 

~~~ step: ctrl-q
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -6,6 +6,10 @@
 #include <termios.h>
 #include <unistd.h>
 
+/*** defines ***/
+
+#define CTRL_KEY(k) ((k) & 0x1f)
+
 /*** data ***/
 
 struct termios orig_termios;
@@ -45,12 +49,7 @@ int main() {
   while (1) {
     char c = '\0';
     if (read(STDIN_FILENO, &c, 1) == -1) die("read");
-    if (isprint(c)) {
-      printf("%d ('%c')\r\n", c, c);
-    } else {
-      printf("%d\r\n", c);
-    }
-    if (c == 'q') break;
+    if (c == CTRL_KEY('q')) break;
   }
 
   return 0;

~~~ step: refactor-input
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -41,15 +41,33 @@ void enableRawMode() {
   if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw) == -1) die("tcsetattr");
 }
 
+char editorReadKey() {
+  int nread;
+  char c;
+  while ((nread = read(STDIN_FILENO, &c, 1)) == 0);
+  if (nread == -1) die("read");
+  return c;
+}
+
+/*** input ***/
+
+void editorProcessKeypress() {
+  char c = editorReadKey();
+
+  switch (c) {
+    case CTRL_KEY('q'):
+      exit(0);
+      break;
+  }
+}
+
 /*** init ***/
 
 int main() {
   enableRawMode();
 
   while (1) {
-    char c = '\0';
-    if (read(STDIN_FILENO, &c, 1) == -1) die("read");
-    if (c == CTRL_KEY('q')) break;
+    editorProcessKeypress();
   }
 
   return 0;

~~~ step: clear-screen
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -49,6 +49,12 @@ char editorReadKey() {
   return c;
 }
 
+/*** output ***/
+
+void editorRefreshScreen() {
+  write(STDOUT_FILENO, "\x1b[2J", 4);
+}
+
 /*** input ***/
 
 void editorProcessKeypress() {
@@ -67,6 +73,7 @@ int main() {
   enableRawMode();
 
   while (1) {
+    editorRefreshScreen();
     editorProcessKeypress();
   }
 

~~~ step: cursor-home
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -53,6 +53,7 @@ char editorReadKey() {
 
 void editorRefreshScreen() {
   write(STDOUT_FILENO, "\x1b[2J", 4);
+  write(STDOUT_FILENO, "\x1b[H", 3);
 }
 
 /*** input ***/

~~~ step: clear-screen-exit
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -17,6 +17,9 @@ struct termios orig_termios;
 /*** terminal ***/
 
 void die(const char *s) {
+  write(STDOUT_FILENO, "\x1b[2J", 4);
+  write(STDOUT_FILENO, "\x1b[H", 3);
+
   perror(s);
   exit(1);
 }
@@ -63,6 +66,8 @@ void editorProcessKeypress() {
 
   switch (c) {
     case CTRL_KEY('q'):
+      write(STDOUT_FILENO, "\x1b[2J", 4);
+      write(STDOUT_FILENO, "\x1b[H", 3);
       exit(0);
       break;
   }

~~~ step: tildes
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -54,9 +54,20 @@ char editorReadKey() {
 
 /*** output ***/
 
+void editorDrawRows() {
+  int y;
+  for (y = 0; y < 24; y++) {
+    write(STDOUT_FILENO, "~\r\n", 3);
+  }
+}
+
 void editorRefreshScreen() {
   write(STDOUT_FILENO, "\x1b[2J", 4);
   write(STDOUT_FILENO, "\x1b[H", 3);
+
+  editorDrawRows();
+
+  write(STDOUT_FILENO, "\x1b[H", 3);
 }
 
 /*** input ***/

~~~ step: global-state
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -12,7 +12,11 @@
 
 /*** data ***/
 
-struct termios orig_termios;
+struct editorConfig {
+  struct termios orig_termios;
+};
+
+struct editorConfig E;
 
 /*** terminal ***/
 
@@ -25,15 +29,15 @@ void die(const char *s) {
 }
 
 void disableRawMode() {
-  if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &orig_termios) == -1)
+  if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &E.orig_termios) == -1)
     die("tcsetattr");
 }
 
 void enableRawMode() {
-  if (tcgetattr(STDIN_FILENO, &orig_termios) == -1) die("tcgetattr");
+  if (tcgetattr(STDIN_FILENO, &E.orig_termios) == -1) die("tcgetattr");
   atexit(disableRawMode);
 
-  struct termios raw = orig_termios;
+  struct termios raw = E.orig_termios;
   raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);
   raw.c_oflag &= ~(OPOST);
   raw.c_cflag |= (CS8);

~~~ step: window-size-ioctl
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -3,6 +3,7 @@
 #include <ctype.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <sys/ioctl.h>
 #include <termios.h>
 #include <unistd.h>
 
@@ -56,6 +57,18 @@ char editorReadKey() {
   return c;
 }
 
+int getWindowSize(int *rows, int *cols) {
+  struct winsize ws;
+
+  if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1 || ws.ws_col == 0) {
+    return -1;
+  } else {
+    *cols = ws.ws_col;
+    *rows = ws.ws_row;
+    return 0;
+  }
+}
+
 /*** output ***/
 
 void editorDrawRows() {

~~~ step: init-editor
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -14,6 +14,8 @@
 /*** data ***/
 
 struct editorConfig {
+  int screenrows;
+  int screencols;
   struct termios orig_termios;
 };
 
@@ -103,8 +105,13 @@ void editorProcessKeypress() {
 
 /*** init ***/
 
+void initEditor() {
+  if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
+}
+
 int main() {
   enableRawMode();
+  initEditor();
 
   while (1) {
     editorRefreshScreen();

~~~ step: window-size-screenrows
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -75,7 +75,7 @@ int getWindowSize(int *rows, int *cols) {
 
 void editorDrawRows() {
   int y;
-  for (y = 0; y < 24; y++) {
+  for (y = 0; y < E.screenrows; y++) {
     write(STDOUT_FILENO, "~\r\n", 3);
   }
 }

~~~ step: bottom-right
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -62,7 +62,8 @@ char editorReadKey() {
 int getWindowSize(int *rows, int *cols) {
   struct winsize ws;
 
-  if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1 || ws.ws_col == 0) {
+  if (1 || ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1 || ws.ws_col == 0) {
+    if (write(STDOUT_FILENO, "\x1b[999C\x1b[999B", 12) != 12) return -1;
     return -1;
   } else {
     *cols = ws.ws_col;

~~~ step: cursor-query
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -59,12 +59,28 @@ char editorReadKey() {
   return c;
 }
 
+int getCursorPosition(int *rows, int *cols) {
+  if (write(STDOUT_FILENO, "\x1b[6n", 4) != 4) return -1;
+
+  printf("\r\n");
+  char c;
+  while (read(STDIN_FILENO, &c, 1) == 1) {
+    if (isprint(c)) {
+      printf("%d ('%c')\r\n", c, c);
+    } else {
+      printf("%d\r\n", c);
+    }
+  }
+
+  return -1;
+}
+
 int getWindowSize(int *rows, int *cols) {
   struct winsize ws;
 
   if (1 || ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1 || ws.ws_col == 0) {
     if (write(STDOUT_FILENO, "\x1b[999C\x1b[999B", 12) != 12) return -1;
-    return -1;
+    return getCursorPosition(rows, cols);
   } else {
     *cols = ws.ws_col;
     *rows = ws.ws_row;

~~~ step: response-buffer
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -60,18 +60,19 @@ char editorReadKey() {
 }
 
 int getCursorPosition(int *rows, int *cols) {
+  char buf[32];
+  unsigned int i = 0;
+
   if (write(STDOUT_FILENO, "\x1b[6n", 4) != 4) return -1;
 
-  printf("\r\n");
-  char c;
-  while (read(STDIN_FILENO, &c, 1) == 1) {
-    if (isprint(c)) {
-      printf("%d ('%c')\r\n", c, c);
-    } else {
-      printf("%d\r\n", c);
-    }
+  while (i < sizeof(buf) - 1) {
+    if (read(STDIN_FILENO, &buf[i], 1) != 1) break;
+    if (buf[i] == 'R') break;
+    i++;
   }
+  buf[i] = '\0';
 
+  printf("\r\n&buf[1]: '%s'\r\n", &buf[1]);
   return -1;
 }
 

~~~ step: parse-response
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -72,8 +72,10 @@ int getCursorPosition(int *rows, int *cols) {
   }
   buf[i] = '\0';
 
-  printf("\r\n&buf[1]: '%s'\r\n", &buf[1]);
-  return -1;
+  if (buf[0] != '\x1b' || buf[1] != '[') return -1;
+  if (sscanf(&buf[2], "%d;%d", rows, cols) != 2) return -1;
+
+  return 0;
 }
 
 int getWindowSize(int *rows, int *cols) {

~~~ step: cleanup-window-size
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -81,7 +81,7 @@ int getCursorPosition(int *rows, int *cols) {
 int getWindowSize(int *rows, int *cols) {
   struct winsize ws;
 
-  if (1 || ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1 || ws.ws_col == 0) {
+  if (ioctl(STDOUT_FILENO, TIOCGWINSZ, &ws) == -1 || ws.ws_col == 0) {
     if (write(STDOUT_FILENO, "\x1b[999C\x1b[999B", 12) != 12) return -1;
     return getCursorPosition(rows, cols);
   } else {

~~~ step: last-line
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -96,7 +96,11 @@ int getWindowSize(int *rows, int *cols) {
 void editorDrawRows() {
   int y;
   for (y = 0; y < E.screenrows; y++) {
-    write(STDOUT_FILENO, "~\r\n", 3);
+    write(STDOUT_FILENO, "~", 1);
+
+    if (y < E.screenrows - 1) {
+      write(STDOUT_FILENO, "\r\n", 2);
+    }
   }
 }
 

~~~ step: abuf-struct
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -91,6 +91,15 @@ int getWindowSize(int *rows, int *cols) {
   }
 }
 
+/*** append buffer ***/
+
+struct abuf {
+  char *b;
+  int len;
+};
+
+#define ABUF_INIT {NULL, 0}
+
 /*** output ***/
 
 void editorDrawRows() {

~~~ step: abuf-append
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -3,6 +3,7 @@
 #include <ctype.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include <sys/ioctl.h>
 #include <termios.h>
 #include <unistd.h>
@@ -100,6 +101,19 @@ struct abuf {
 
 #define ABUF_INIT {NULL, 0}
 
+void abAppend(struct abuf *ab, const char *s, int len) {
+  char *new = realloc(ab->b, ab->len + len);
+
+  if (new == NULL) return;
+  memcpy(&new[ab->len], s, len);
+  ab->b = new;
+  ab->len += len;
+}
+
+void abFree(struct abuf *ab) {
+  free(ab->b);
+}
+
 /*** output ***/
 
 void editorDrawRows() {

~~~ step: abuf-ab
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -116,24 +116,29 @@ void abFree(struct abuf *ab) {
 
 /*** output ***/
 
-void editorDrawRows() {
+void editorDrawRows(struct abuf *ab) {
   int y;
   for (y = 0; y < E.screenrows; y++) {
-    write(STDOUT_FILENO, "~", 1);
+    abAppend(ab, "~", 1);
 
     if (y < E.screenrows - 1) {
-      write(STDOUT_FILENO, "\r\n", 2);
+      abAppend(ab, "\r\n", 2);
     }
   }
 }
 
 void editorRefreshScreen() {
-  write(STDOUT_FILENO, "\x1b[2J", 4);
-  write(STDOUT_FILENO, "\x1b[H", 3);
+  struct abuf ab = ABUF_INIT;
 
-  editorDrawRows();
+  abAppend(&ab, "\x1b[2J", 4);
+  abAppend(&ab, "\x1b[H", 3);
 
-  write(STDOUT_FILENO, "\x1b[H", 3);
+  editorDrawRows(&ab);
+
+  abAppend(&ab, "\x1b[H", 3);
+
+  write(STDOUT_FILENO, ab.b, ab.len);
+  abFree(&ab);
 }
 
 /*** input ***/

~~~ step: hide-cursor
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -130,12 +130,14 @@ void editorDrawRows(struct abuf *ab) {
 void editorRefreshScreen() {
   struct abuf ab = ABUF_INIT;
 
+  abAppend(&ab, "\x1b[?25l", 6);
   abAppend(&ab, "\x1b[2J", 4);
   abAppend(&ab, "\x1b[H", 3);
 
   editorDrawRows(&ab);
 
   abAppend(&ab, "\x1b[H", 3);
+  abAppend(&ab, "\x1b[?25h", 6);
 
   write(STDOUT_FILENO, ab.b, ab.len);
   abFree(&ab);

~~~ step: clear-rest-of-line
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -121,6 +121,7 @@ void editorDrawRows(struct abuf *ab) {
   for (y = 0; y < E.screenrows; y++) {
     abAppend(ab, "~", 1);
 
+    abAppend(ab, "\x1b[K", 3);
     if (y < E.screenrows - 1) {
       abAppend(ab, "\r\n", 2);
     }
@@ -131,7 +132,6 @@ void editorRefreshScreen() {
   struct abuf ab = ABUF_INIT;
 
   abAppend(&ab, "\x1b[?25l", 6);
-  abAppend(&ab, "\x1b[2J", 4);
   abAppend(&ab, "\x1b[H", 3);
 
   editorDrawRows(&ab);

~~~ step: welcome
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -10,6 +10,8 @@
 
 /*** defines ***/
 
+#define KILO_VERSION "0.0.1"
+
 #define CTRL_KEY(k) ((k) & 0x1f)
 
 /*** data ***/
@@ -119,7 +121,15 @@ void abFree(struct abuf *ab) {
 void editorDrawRows(struct abuf *ab) {
   int y;
   for (y = 0; y < E.screenrows; y++) {
-    abAppend(ab, "~", 1);
+    if (y == E.screenrows / 3) {
+      char welcome[80];
+      int welcomelen = snprintf(welcome, sizeof(welcome),
+        "Kilo editor -- version %s", KILO_VERSION);
+      if (welcomelen > E.screencols) welcomelen = E.screencols;
+      abAppend(ab, welcome, welcomelen);
+    } else {
+      abAppend(ab, "~", 1);
+    }
 
     abAppend(ab, "\x1b[K", 3);
     if (y < E.screenrows - 1) {

~~~ step: welcome-center
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -126,6 +126,12 @@ void editorDrawRows(struct abuf *ab) {
       int welcomelen = snprintf(welcome, sizeof(welcome),
         "Kilo editor -- version %s", KILO_VERSION);
       if (welcomelen > E.screencols) welcomelen = E.screencols;
+      int padding = (E.screencols - welcomelen) / 2;
+      if (padding) {
+        abAppend(ab, "~", 1);
+        padding--;
+      }
+      while (padding--) abAppend(ab, " ", 1);
       abAppend(ab, welcome, welcomelen);
     } else {
       abAppend(ab, "~", 1);

~~~ step: cx-cy
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -17,6 +17,7 @@
 /*** data ***/
 
 struct editorConfig {
+  int cx, cy;
   int screenrows;
   int screencols;
   struct termios orig_termios;
@@ -176,6 +177,9 @@ void editorProcessKeypress() {
 /*** init ***/
 
 void initEditor() {
+  E.cx = 0;
+  E.cy = 0;
+
   if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
 }
 

~~~ step: set-cursor-position
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -153,7 +153,10 @@ void editorRefreshScreen() {
 
   editorDrawRows(&ab);
 
-  abAppend(&ab, "\x1b[H", 3);
+  char buf[32];
+  snprintf(buf, sizeof(buf), "\x1b[%d;%dH", E.cy + 1, E.cx + 1);
+  abAppend(&ab, buf, strlen(buf));
+
   abAppend(&ab, "\x1b[?25h", 6);
 
   write(STDOUT_FILENO, ab.b, ab.len);

~~~ step: move-cursor
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -165,6 +165,23 @@ void editorRefreshScreen() {
 
 /*** input ***/
 
+void editorMoveCursor(char key) {
+  switch (key) {
+    case 'a':
+      E.cx--;
+      break;
+    case 'd':
+      E.cx++;
+      break;
+    case 'w':
+      E.cy--;
+      break;
+    case 's':
+      E.cy++;
+      break;
+  }
+}
+
 void editorProcessKeypress() {
   char c = editorReadKey();
 
@@ -174,6 +191,13 @@ void editorProcessKeypress() {
       write(STDOUT_FILENO, "\x1b[H", 3);
       exit(0);
       break;
+
+    case 'w':
+    case 's':
+    case 'a':
+    case 'd':
+      editorMoveCursor(c);
+      break;
   }
 }
 

~~~ step: detect-arrow-keys
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -60,7 +60,26 @@ char editorReadKey() {
   char c;
   while ((nread = read(STDIN_FILENO, &c, 1)) == 0);
   if (nread == -1) die("read");
-  return c;
+
+  if (c == '\x1b') {
+    char seq[3];
+
+    if (read(STDIN_FILENO, &seq[0], 1) != 1) return '\x1b';
+    if (read(STDIN_FILENO, &seq[1], 1) != 1) return '\x1b';
+
+    if (seq[0] == '[') {
+      switch (seq[1]) {
+        case 'A': return 'w';
+        case 'B': return 's';
+        case 'C': return 'd';
+        case 'D': return 'a';
+      }
+    }
+
+    return '\x1b';
+  } else {
+    return c;
+  }
 }
 
 int getCursorPosition(int *rows, int *cols) {

~~~ step: arrow-keys-enum
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -14,6 +14,13 @@
 
 #define CTRL_KEY(k) ((k) & 0x1f)
 
+enum editorKey {
+  ARROW_LEFT = 'a',
+  ARROW_RIGHT = 'd',
+  ARROW_UP = 'w',
+  ARROW_DOWN = 's'
+};
+
 /*** data ***/
 
 struct editorConfig {
@@ -69,10 +76,10 @@ char editorReadKey() {
 
     if (seq[0] == '[') {
       switch (seq[1]) {
-        case 'A': return 'w';
-        case 'B': return 's';
-        case 'C': return 'd';
-        case 'D': return 'a';
+        case 'A': return ARROW_UP;
+        case 'B': return ARROW_DOWN;
+        case 'C': return ARROW_RIGHT;
+        case 'D': return ARROW_LEFT;
       }
     }
 
@@ -186,16 +193,16 @@ void editorRefreshScreen() {
 
 void editorMoveCursor(char key) {
   switch (key) {
-    case 'a':
+    case ARROW_LEFT:
       E.cx--;
       break;
-    case 'd':
+    case ARROW_RIGHT:
       E.cx++;
       break;
-    case 'w':
+    case ARROW_UP:
       E.cy--;
       break;
-    case 's':
+    case ARROW_DOWN:
       E.cy++;
       break;
   }
@@ -211,10 +218,10 @@ void editorProcessKeypress() {
       exit(0);
       break;
 
-    case 'w':
-    case 's':
-    case 'a':
-    case 'd':
+    case ARROW_UP:
+    case ARROW_DOWN:
+    case ARROW_LEFT:
+    case ARROW_RIGHT:
       editorMoveCursor(c);
       break;
   }

~~~ step: arrow-keys-int
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -15,10 +15,10 @@
 #define CTRL_KEY(k) ((k) & 0x1f)
 
 enum editorKey {
-  ARROW_LEFT = 'a',
-  ARROW_RIGHT = 'd',
-  ARROW_UP = 'w',
-  ARROW_DOWN = 's'
+  ARROW_LEFT = 1000,
+  ARROW_RIGHT,
+  ARROW_UP,
+  ARROW_DOWN
 };
 
 /*** data ***/
@@ -62,7 +62,7 @@ void enableRawMode() {
   if (tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw) == -1) die("tcsetattr");
 }
 
-char editorReadKey() {
+int editorReadKey() {
   int nread;
   char c;
   while ((nread = read(STDIN_FILENO, &c, 1)) == 0);
@@ -191,7 +191,7 @@ void editorRefreshScreen() {
 
 /*** input ***/
 
-void editorMoveCursor(char key) {
+void editorMoveCursor(int key) {
   switch (key) {
     case ARROW_LEFT:
       E.cx--;
@@ -209,7 +209,7 @@ void editorMoveCursor(char key) {
 }
 
 void editorProcessKeypress() {
-  char c = editorReadKey();
+  int c = editorReadKey();
 
   switch (c) {
     case CTRL_KEY('q'):

~~~ step: off-screen
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -194,16 +194,24 @@ void editorRefreshScreen() {
 void editorMoveCursor(int key) {
   switch (key) {
     case ARROW_LEFT:
-      E.cx--;
+      if (E.cx != 0) {
+        E.cx--;
+      }
       break;
     case ARROW_RIGHT:
-      E.cx++;
+      if (E.cx != E.screencols - 1) {
+        E.cx++;
+      }
       break;
     case ARROW_UP:
-      E.cy--;
+      if (E.cy != 0) {
+        E.cy--;
+      }
       break;
     case ARROW_DOWN:
-      E.cy++;
+      if (E.cy != E.screenrows - 1) {
+        E.cy++;
+      }
       break;
   }
 }

~~~ step: detect-page-up-down
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -18,7 +18,9 @@ enum editorKey {
   ARROW_LEFT = 1000,
   ARROW_RIGHT,
   ARROW_UP,
-  ARROW_DOWN
+  ARROW_DOWN,
+  PAGE_UP,
+  PAGE_DOWN
 };
 
 /*** data ***/
@@ -75,11 +77,21 @@ int editorReadKey() {
     if (read(STDIN_FILENO, &seq[1], 1) != 1) return '\x1b';
 
     if (seq[0] == '[') {
-      switch (seq[1]) {
-        case 'A': return ARROW_UP;
-        case 'B': return ARROW_DOWN;
-        case 'C': return ARROW_RIGHT;
-        case 'D': return ARROW_LEFT;
+      if (seq[1] >= '0' && seq[1] <= '9') {
+        if (read(STDIN_FILENO, seq + 2, 1) != 1) return '\x1b';
+        if (seq[2] == '~') {
+          switch (seq[1]) {
+            case '5': return PAGE_UP;
+            case '6': return PAGE_DOWN;
+          }
+        }
+      } else {
+        switch (seq[1]) {
+          case 'A': return ARROW_UP;
+          case 'B': return ARROW_DOWN;
+          case 'C': return ARROW_RIGHT;
+          case 'D': return ARROW_LEFT;
+        }
       }
     }
 

~~~ step: page-up-down-simple
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -238,6 +238,15 @@ void editorProcessKeypress() {
       exit(0);
       break;
 
+    case PAGE_UP:
+    case PAGE_DOWN:
+      {
+        int times = E.screenrows;
+        while (times--)
+          editorMoveCursor(c == PAGE_UP ? ARROW_UP : ARROW_DOWN);
+      }
+      break;
+
     case ARROW_UP:
     case ARROW_DOWN:
     case ARROW_LEFT:

~~~ step: detect-home-end-keys
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -19,6 +19,8 @@ enum editorKey {
   ARROW_RIGHT,
   ARROW_UP,
   ARROW_DOWN,
+  HOME_KEY,
+  END_KEY,
   PAGE_UP,
   PAGE_DOWN
 };
@@ -81,8 +83,12 @@ int editorReadKey() {
         if (read(STDIN_FILENO, seq + 2, 1) != 1) return '\x1b';
         if (seq[2] == '~') {
           switch (seq[1]) {
+            case '1': return HOME_KEY;
+            case '4': return END_KEY;
             case '5': return PAGE_UP;
             case '6': return PAGE_DOWN;
+            case '7': return HOME_KEY;
+            case '8': return END_KEY;
           }
         }
       } else {
@@ -91,8 +97,15 @@ int editorReadKey() {
           case 'B': return ARROW_DOWN;
           case 'C': return ARROW_RIGHT;
           case 'D': return ARROW_LEFT;
+          case 'H': return HOME_KEY;
+          case 'F': return END_KEY;
         }
       }
+    } else if (seq[0] == 'O') {
+      switch (seq[1]) {
+        case 'H': return HOME_KEY;
+        case 'F': return END_KEY;
+      }
     }
 
     return '\x1b';

~~~ step: home-end-keys-simple
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -251,6 +251,14 @@ void editorProcessKeypress() {
       exit(0);
       break;
 
+    case HOME_KEY:
+      E.cx = 0;
+      break;
+
+    case END_KEY:
+      E.cx = E.screencols - 1;
+      break;
+
     case PAGE_UP:
     case PAGE_DOWN:
       {

~~~ step: detect-delete-key
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -19,6 +19,7 @@ enum editorKey {
   ARROW_RIGHT,
   ARROW_UP,
   ARROW_DOWN,
+  DEL_KEY,
   HOME_KEY,
   END_KEY,
   PAGE_UP,
@@ -84,6 +85,7 @@ int editorReadKey() {
         if (seq[2] == '~') {
           switch (seq[1]) {
             case '1': return HOME_KEY;
+            case '3': return DEL_KEY;
             case '4': return END_KEY;
             case '5': return PAGE_UP;
             case '6': return PAGE_DOWN;

~~~ step: single-line-erow
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -28,10 +28,17 @@ enum editorKey {
 
 /*** data ***/
 
+typedef struct erow {
+  int size;
+  char *chars;
+} erow;
+
 struct editorConfig {
   int cx, cy;
   int screenrows;
   int screencols;
+  int numrows;
+  erow row;
   struct termios orig_termios;
 };
 
@@ -284,6 +291,7 @@ void editorProcessKeypress() {
 void initEditor() {
   E.cx = 0;
   E.cy = 0;
+  E.numrows = 0;
 
   if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
 }

~~~ step: single-line-hardcoded
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -5,6 +5,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <sys/ioctl.h>
+#include <sys/types.h>
 #include <termios.h>
 #include <unistd.h>
 
@@ -155,6 +156,19 @@ int getWindowSize(int *rows, int *cols) {
   }
 }
 
+/*** file i/o ***/
+
+void editorOpen() {
+  char *line = "Hello, world!";
+  ssize_t linelen = 13;
+
+  E.row.size = linelen;
+  E.row.chars = malloc(linelen + 1);
+  memcpy(E.row.chars, line, linelen);
+  E.row.chars[linelen] = '\0';
+  E.numrows = 1;
+}
+
 /*** append buffer ***/
 
 struct abuf {
@@ -299,6 +313,7 @@ void initEditor() {
 int main() {
   enableRawMode();
   initEditor();
+  editorOpen();
 
   while (1) {
     editorRefreshScreen();

~~~ step: single-line-render
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -196,20 +196,26 @@ void abFree(struct abuf *ab) {
 void editorDrawRows(struct abuf *ab) {
   int y;
   for (y = 0; y < E.screenrows; y++) {
-    if (y == E.screenrows / 3) {
-      char welcome[80];
-      int welcomelen = snprintf(welcome, sizeof(welcome),
-        "Kilo editor -- version %s", KILO_VERSION);
-      if (welcomelen > E.screencols) welcomelen = E.screencols;
-      int padding = (E.screencols - welcomelen) / 2;
-      if (padding) {
+    if (y >= E.numrows) {
+      if (y == E.screenrows / 3) {
+        char welcome[80];
+        int welcomelen = snprintf(welcome, sizeof(welcome),
+          "Kilo editor -- version %s", KILO_VERSION);
+        if (welcomelen > E.screencols) welcomelen = E.screencols;
+        int padding = (E.screencols - welcomelen) / 2;
+        if (padding) {
+          abAppend(ab, "~", 1);
+          padding--;
+        }
+        while (padding--) abAppend(ab, " ", 1);
+        abAppend(ab, welcome, welcomelen);
+      } else {
         abAppend(ab, "~", 1);
-        padding--;
       }
-      while (padding--) abAppend(ab, " ", 1);
-      abAppend(ab, welcome, welcomelen);
     } else {
-      abAppend(ab, "~", 1);
+      int len = E.row.size;
+      if (len > E.screencols) len = E.screencols;
+      abAppend(ab, E.row.chars, len);
     }
 
     abAppend(ab, "\x1b[K", 3);

~~~ step: single-line-file
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -158,15 +158,25 @@ int getWindowSize(int *rows, int *cols) {
 
 /*** file i/o ***/
 
-void editorOpen() {
-  char *line = "Hello, world!";
-  ssize_t linelen = 13;
+void editorOpen(char *filename) {
+  FILE *fp = fopen(filename, "r");
+  if (!fp) die("fopen");
 
-  E.row.size = linelen;
-  E.row.chars = malloc(linelen + 1);
-  memcpy(E.row.chars, line, linelen);
-  E.row.chars[linelen] = '\0';
-  E.numrows = 1;
+  char *line = NULL;
+  size_t linecap = 0;
+  ssize_t linelen;
+  linelen = getline(&line, &linecap, fp);
+  if (linelen != -1) {
+    if (linelen > 0 && (line[linelen - 1] == '\n' || line[linelen - 1] == '\r'))
+      linelen--;
+    E.row.size = linelen;
+    E.row.chars = malloc(linelen + 1);
+    memcpy(E.row.chars, line, linelen);
+    E.row.chars[linelen] = '\0';
+    E.numrows = 1;
+  }
+  free(line);
+  fclose(fp);
 }
 
 /*** append buffer ***/
@@ -316,10 +326,12 @@ void initEditor() {
   if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
 }
 
-int main() {
+int main(int argc, char *argv[]) {
   enableRawMode();
   initEditor();
-  editorOpen();
+  if (argc >= 2) {
+    editorOpen(argv[1]);
+  }
 
   while (1) {
     editorRefreshScreen();

~~~ step: getline-defines
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -1,5 +1,9 @@
 /*** includes ***/
 
+#define _DEFAULT_SOURCE
+#define _BSD_SOURCE
+#define _GNU_SOURCE
+
 #include <ctype.h>
 #include <stdio.h>
 #include <stdlib.h>

~~~ step: hide-welcome-message
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -211,7 +211,7 @@ void editorDrawRows(struct abuf *ab) {
   int y;
   for (y = 0; y < E.screenrows; y++) {
     if (y >= E.numrows) {
-      if (y == E.screenrows / 3) {
+      if (E.numrows == 0 && y == E.screenrows / 3) {
         char welcome[80];
         int welcomelen = snprintf(welcome, sizeof(welcome),
           "Kilo editor -- version %s", KILO_VERSION);

~~~ step: multiple-lines-struct
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -43,7 +43,7 @@ struct editorConfig {
   int screenrows;
   int screencols;
   int numrows;
-  erow row;
+  erow *row;
   struct termios orig_termios;
 };
 
@@ -326,6 +326,7 @@ void initEditor() {
   E.cx = 0;
   E.cy = 0;
   E.numrows = 0;
+  E.row = NULL;
 
   if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
 }

~~~ step: append-row
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -160,6 +160,16 @@ int getWindowSize(int *rows, int *cols) {
   }
 }
 
+/*** row operations ***/
+
+void editorAppendRow(char *s, size_t len) {
+  E.row.size = linelen;
+  E.row.chars = malloc(linelen + 1);
+  memcpy(E.row.chars, line, linelen);
+  E.row.chars[linelen] = '\0';
+  E.numrows = 1;
+}
+
 /*** file i/o ***/
 
 void editorOpen(char *filename) {
@@ -173,11 +183,7 @@ void editorOpen(char *filename) {
   if (linelen != -1) {
     if (linelen > 0 && (line[linelen - 1] == '\n' || line[linelen - 1] == '\r'))
       linelen--;
-    E.row.size = linelen;
-    E.row.chars = malloc(linelen + 1);
-    memcpy(E.row.chars, line, linelen);
-    E.row.chars[linelen] = '\0';
-    E.numrows = 1;
+    editorAppendRow(line, linelen);
   }
   free(line);
   fclose(fp);

~~~ step: fix-append-row
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -163,11 +163,14 @@ int getWindowSize(int *rows, int *cols) {
 /*** row operations ***/
 
 void editorAppendRow(char *s, size_t len) {
-  E.row.size = linelen;
-  E.row.chars = malloc(linelen + 1);
-  memcpy(E.row.chars, line, linelen);
-  E.row.chars[linelen] = '\0';
-  E.numrows = 1;
+  E.row = realloc(E.row, sizeof(erow) * (E.numrows + 1));
+
+  int at = E.numrows;
+  E.row[at].size = len;
+  E.row[at].chars = malloc(len + 1);
+  memcpy(E.row[at].chars, s, len);
+  E.row[at].chars[len] = '\0';
+  E.numrows++;
 }
 
 /*** file i/o ***/

~~~ step: render-multiple-lines
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -236,9 +236,9 @@ void editorDrawRows(struct abuf *ab) {
         abAppend(ab, "~", 1);
       }
     } else {
-      int len = E.row.size;
+      int len = E.row[y].size;
       if (len > E.screencols) len = E.screencols;
-      abAppend(ab, E.row.chars, len);
+      abAppend(ab, E.row[y].chars, len);
     }
 
     abAppend(ab, "\x1b[K", 3);

~~~ step: read-multiple-lines
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -182,8 +182,7 @@ void editorOpen(char *filename) {
   char *line = NULL;
   size_t linecap = 0;
   ssize_t linelen;
-  linelen = getline(&line, &linecap, fp);
-  if (linelen != -1) {
+  while ((linelen = getline(&line, &linecap, fp)) != -1) {
     if (linelen > 0 && (line[linelen - 1] == '\n' || line[linelen - 1] == '\r'))
       linelen--;
     editorAppendRow(line, linelen);

~~~ step: rowoff
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -40,6 +40,7 @@ typedef struct erow {
 
 struct editorConfig {
   int cx, cy;
+  int rowoff;
   int screenrows;
   int screencols;
   int numrows;
@@ -333,6 +334,7 @@ void editorProcessKeypress() {
 void initEditor() {
   E.cx = 0;
   E.cy = 0;
+  E.rowoff = 0;
   E.numrows = 0;
   E.row = NULL;
 

~~~ step: filerow
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -219,7 +219,8 @@ void abFree(struct abuf *ab) {
 void editorDrawRows(struct abuf *ab) {
   int y;
   for (y = 0; y < E.screenrows; y++) {
-    if (y >= E.numrows) {
+    int filerow = y + E.rowoff;
+    if (filerow >= E.numrows) {
       if (E.numrows == 0 && y == E.screenrows / 3) {
         char welcome[80];
         int welcomelen = snprintf(welcome, sizeof(welcome),
@@ -236,9 +237,9 @@ void editorDrawRows(struct abuf *ab) {
         abAppend(ab, "~", 1);
       }
     } else {
-      int len = E.row[y].size;
+      int len = E.row[filerow].size;
       if (len > E.screencols) len = E.screencols;
-      abAppend(ab, E.row[y].chars, len);
+      abAppend(ab, E.row[filerow].chars, len);
     }
 
     abAppend(ab, "\x1b[K", 3);

~~~ step: editor-scroll
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -216,6 +216,15 @@ void abFree(struct abuf *ab) {
 
 /*** output ***/
 
+void editorScroll() {
+  if (E.cy < E.rowoff) {
+    E.rowoff = E.cy;
+  }
+  if (E.cy >= E.rowoff + E.screenrows) {
+    E.rowoff = E.cy - E.screenrows + 1;
+  }
+}
+
 void editorDrawRows(struct abuf *ab) {
   int y;
   for (y = 0; y < E.screenrows; y++) {
@@ -250,6 +259,8 @@ void editorDrawRows(struct abuf *ab) {
 }
 
 void editorRefreshScreen() {
+  editorScroll();
+
   struct abuf ab = ABUF_INIT;
 
   abAppend(&ab, "\x1b[?25l", 6);

~~~ step: enable-vertical-scroll
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -298,7 +298,7 @@ void editorMoveCursor(int key) {
       }
       break;
     case ARROW_DOWN:
-      if (E.cy != E.screenrows - 1) {
+      if (E.cy < E.numrows) {
         E.cy++;
       }
       break;

~~~ step: fix-cursor-scrolling
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -269,7 +269,7 @@ void editorRefreshScreen() {
   editorDrawRows(&ab);
 
   char buf[32];
-  snprintf(buf, sizeof(buf), "\x1b[%d;%dH", E.cy + 1, E.cx + 1);
+  snprintf(buf, sizeof(buf), "\x1b[%d;%dH", (E.cy - E.rowoff) + 1, E.cx + 1);
   abAppend(&ab, buf, strlen(buf));
 
   abAppend(&ab, "\x1b[?25h", 6);

~~~ step: coloff
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -41,6 +41,7 @@ typedef struct erow {
 struct editorConfig {
   int cx, cy;
   int rowoff;
+  int coloff;
   int screenrows;
   int screencols;
   int numrows;
@@ -347,6 +348,7 @@ void initEditor() {
   E.cx = 0;
   E.cy = 0;
   E.rowoff = 0;
+  E.coloff = 0;
   E.numrows = 0;
   E.row = NULL;
 

~~~ step: render-coloff
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -247,9 +247,10 @@ void editorDrawRows(struct abuf *ab) {
         abAppend(ab, "~", 1);
       }
     } else {
-      int len = E.row[filerow].size;
+      int len = E.row[filerow].size - E.coloff;
+      if (len < 0) len = 0;
       if (len > E.screencols) len = E.screencols;
-      abAppend(ab, E.row[filerow].chars, len);
+      abAppend(ab, &E.row[filerow].chars[E.coloff], len);
     }
 
     abAppend(ab, "\x1b[K", 3);

~~~ step: editor-scroll-horizontal
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -224,6 +224,12 @@ void editorScroll() {
   if (E.cy >= E.rowoff + E.screenrows) {
     E.rowoff = E.cy - E.screenrows + 1;
   }
+  if (E.cx < E.coloff) {
+    E.coloff = E.cx;
+  }
+  if (E.cx >= E.coloff + E.screencols) {
+    E.coloff = E.cx - E.screencols + 1;
+  }
 }
 
 void editorDrawRows(struct abuf *ab) {

~~~ step: enable-horizontal-scroll
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -296,9 +296,7 @@ void editorMoveCursor(int key) {
       }
       break;
     case ARROW_RIGHT:
-      if (E.cx != E.screencols - 1) {
-        E.cx++;
-      }
+      E.cx++;
       break;
     case ARROW_UP:
       if (E.cy != 0) {

~~~ step: fix-cursor-scrolling-horizontal
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -277,7 +277,8 @@ void editorRefreshScreen() {
   editorDrawRows(&ab);
 
   char buf[32];
-  snprintf(buf, sizeof(buf), "\x1b[%d;%dH", (E.cy - E.rowoff) + 1, E.cx + 1);
+  snprintf(buf, sizeof(buf), "\x1b[%d;%dH", (E.cy - E.rowoff) + 1,
+                                            (E.cx - E.coloff) + 1);
   abAppend(&ab, buf, strlen(buf));
 
   abAppend(&ab, "\x1b[?25h", 6);

~~~ step: scroll-limits
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -290,6 +290,8 @@ void editorRefreshScreen() {
 /*** input ***/
 
 void editorMoveCursor(int key) {
+  erow *row = (E.cy >= E.numrows) ? NULL : &E.row[E.cy];
+
   switch (key) {
     case ARROW_LEFT:
       if (E.cx != 0) {
@@ -297,7 +299,9 @@ void editorMoveCursor(int key) {
       }
       break;
     case ARROW_RIGHT:
-      E.cx++;
+      if (row && E.cx < row->size) {
+        E.cx++;
+      }
       break;
     case ARROW_UP:
       if (E.cy != 0) {

~~~ step: snap-cursor
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -314,6 +314,12 @@ void editorMoveCursor(int key) {
       }
       break;
   }
+
+  row = (E.cy >= E.numrows) ? NULL : &E.row[E.cy];
+  int rowlen = row ? row->size : 0;
+  if (E.cx > rowlen) {
+    E.cx = rowlen;
+  }
 }
 
 void editorProcessKeypress() {

~~~ step: moving-left
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -296,6 +296,9 @@ void editorMoveCursor(int key) {
     case ARROW_LEFT:
       if (E.cx != 0) {
         E.cx--;
+      } else if (E.cy > 0) {
+        E.cy--;
+        E.cx = E.row[E.cy].size;
       }
       break;
     case ARROW_RIGHT:

~~~ step: moving-right
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -304,6 +304,9 @@ void editorMoveCursor(int key) {
     case ARROW_RIGHT:
       if (row && E.cx < row->size) {
         E.cx++;
+      } else if (row && E.cx == row->size) {
+        E.cy++;
+        E.cx = 0;
       }
       break;
     case ARROW_UP:

~~~ step: render-chars
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -35,7 +35,9 @@ enum editorKey {
 
 typedef struct erow {
   int size;
+  int rsize;
   char *chars;
+  char *render;
 } erow;
 
 struct editorConfig {
@@ -172,6 +174,10 @@ void editorAppendRow(char *s, size_t len) {
   E.row[at].chars = malloc(len + 1);
   memcpy(E.row[at].chars, s, len);
   E.row[at].chars[len] = '\0';
+
+  E.row[at].rsize = 0;
+  E.row[at].render = NULL;
+
   E.numrows++;
 }
 

~~~ step: editor-update-row
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -166,6 +166,19 @@ int getWindowSize(int *rows, int *cols) {
 
 /*** row operations ***/
 
+void editorUpdateRow(erow *row) {
+  free(row->render);
+  row->render = malloc(row->size + 1);
+
+  int j;
+  int idx = 0;
+  for (j = 0; j < row->size; j++) {
+    row->render[idx++] = row->chars[j];
+  }
+  row->render[idx] = '\0';
+  row->rsize = idx;
+}
+
 void editorAppendRow(char *s, size_t len) {
   E.row = realloc(E.row, sizeof(erow) * (E.numrows + 1));
 
@@ -177,6 +190,7 @@ void editorAppendRow(char *s, size_t len) {
 
   E.row[at].rsize = 0;
   E.row[at].render = NULL;
+  editorUpdateRow(&E.row[at]);
 
   E.numrows++;
 }

~~~ step: render-render
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -273,10 +273,10 @@ void editorDrawRows(struct abuf *ab) {
         abAppend(ab, "~", 1);
       }
     } else {
-      int len = E.row[filerow].size - E.coloff;
+      int len = E.row[filerow].rsize - E.coloff;
       if (len < 0) len = 0;
       if (len > E.screencols) len = E.screencols;
-      abAppend(ab, &E.row[filerow].chars[E.coloff], len);
+      abAppend(ab, &E.row[filerow].render[E.coloff], len);
     }
 
     abAppend(ab, "\x1b[K", 3);

~~~ step: render-tabs
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -167,13 +167,22 @@ int getWindowSize(int *rows, int *cols) {
 /*** row operations ***/
 
 void editorUpdateRow(erow *row) {
-  free(row->render);
-  row->render = malloc(row->size + 1);
-
+  int tabs = 0;
   int j;
+  for (j = 0; j < row->size; j++)
+    if (row->chars[j] == '\t') tabs++;
+
+  free(row->render);
+  row->render = malloc(row->size + tabs*7 + 1);
+
   int idx = 0;
   for (j = 0; j < row->size; j++) {
-    row->render[idx++] = row->chars[j];
+    if (row->chars[j] == '\t') {
+      row->render[idx++] = ' ';
+      while (idx % 8 != 0) row->render[idx++] = ' ';
+    } else {
+      row->render[idx++] = row->chars[j];
+    }
   }
   row->render[idx] = '\0';
   row->rsize = idx;

~~~ step: rx
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -42,6 +42,7 @@ typedef struct erow {
 
 struct editorConfig {
   int cx, cy;
+  int rx;
   int rowoff;
   int coloff;
   int screenrows;
@@ -398,6 +399,7 @@ void editorProcessKeypress() {
 void initEditor() {
   E.cx = 0;
   E.cy = 0;
+  E.rx = 0;
   E.rowoff = 0;
   E.coloff = 0;
   E.numrows = 0;

~~~ step: cx-to-rx
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -248,17 +248,19 @@ void abFree(struct abuf *ab) {
 /*** output ***/
 
 void editorScroll() {
+  E.rx = E.cx;
+
   if (E.cy < E.rowoff) {
     E.rowoff = E.cy;
   }
   if (E.cy >= E.rowoff + E.screenrows) {
     E.rowoff = E.cy - E.screenrows + 1;
   }
-  if (E.cx < E.coloff) {
-    E.coloff = E.cx;
+  if (E.rx < E.coloff) {
+    E.coloff = E.rx;
   }
-  if (E.cx >= E.coloff + E.screencols) {
-    E.coloff = E.cx - E.screencols + 1;
+  if (E.rx >= E.coloff + E.screencols) {
+    E.coloff = E.rx - E.screencols + 1;
   }
 }
 

~~~ step: render-rx
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -310,7 +310,7 @@ void editorRefreshScreen() {
 
   char buf[32];
   snprintf(buf, sizeof(buf), "\x1b[%d;%dH", (E.cy - E.rowoff) + 1,
-                                            (E.cx - E.coloff) + 1);
+                                            (E.rx - E.coloff) + 1);
   abAppend(&ab, buf, strlen(buf));
 
   abAppend(&ab, "\x1b[?25h", 6);

~~~ step: editor-row-cx-to-rx
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -167,6 +167,17 @@ int getWindowSize(int *rows, int *cols) {
 
 /*** row operations ***/
 
+int editorRowCxToRx(erow *row, int cx) {
+  int rx = 0;
+  int j;
+  for (j = 0; j < cx; j++) {
+    if (row->chars[j] == '\t')
+      rx += 7 - (rx % 8);
+    rx++;
+  }
+  return rx;
+}
+
 void editorUpdateRow(erow *row) {
   int tabs = 0;
   int j;

~~~ step: set-rx
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -259,7 +259,10 @@ void abFree(struct abuf *ab) {
 /*** output ***/
 
 void editorScroll() {
-  E.rx = E.cx;
+  E.rx = 0;
+  if (E.cy < E.numrows) {
+    E.rx = editorRowCxToRx(&E.row[E.cy], E.cx);
+  }
 
   if (E.cy < E.rowoff) {
     E.rowoff = E.cy;

~~~ step: page-up-down
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -395,6 +395,11 @@ void editorProcessKeypress() {
     case PAGE_UP:
     case PAGE_DOWN:
       {
+        if (c == PAGE_UP)
+          E.cy = E.rowoff;
+        else if (c == PAGE_DOWN)
+          E.cy = E.rowoff + E.screenrows - 1;
+
         int times = E.screenrows;
         while (times--)
           editorMoveCursor(c == PAGE_UP ? ARROW_UP : ARROW_DOWN);

~~~ step: home-end-keys
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -389,7 +389,8 @@ void editorProcessKeypress() {
       break;
 
     case END_KEY:
-      E.cx = E.screencols - 1;
+      if (E.cy < E.numrows)
+        E.cx = E.row[E.cy].size;
       break;
 
     case PAGE_UP:

~~~ step: status-bar-make-room
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -306,9 +306,7 @@ void editorDrawRows(struct abuf *ab) {
     }
 
     abAppend(ab, "\x1b[K", 3);
-    if (y < E.screenrows - 1) {
-      abAppend(ab, "\r\n", 2);
-    }
+    abAppend(ab, "\r\n", 2);
   }
 }
 
@@ -428,6 +426,7 @@ void initEditor() {
   E.row = NULL;
 
   if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
+  E.screenrows -= 1;
 }
 
 int main(int argc, char *argv[]) {

~~~ step: blank-status-bar
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -310,6 +310,16 @@ void editorDrawRows(struct abuf *ab) {
   }
 }
 
+void editorDrawStatusBar(struct abuf *ab) {
+  abAppend(ab, "\x1b[7m", 4);
+  int len = 0;
+  while (len < E.screencols) {
+    abAppend(ab, " ", 1);
+    len++;
+  }
+  abAppend(ab, "\x1b[m", 3);
+}
+
 void editorRefreshScreen() {
   editorScroll();
 
@@ -319,6 +329,7 @@ void editorRefreshScreen() {
   abAppend(&ab, "\x1b[H", 3);
 
   editorDrawRows(&ab);
+  editorDrawStatusBar(&ab);
 
   char buf[32];
   snprintf(buf, sizeof(buf), "\x1b[%d;%dH", (E.cy - E.rowoff) + 1,

~~~ step: filename
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -49,6 +49,7 @@ struct editorConfig {
   int screencols;
   int numrows;
   erow *row;
+  char *filename;
   struct termios orig_termios;
 };
 
@@ -219,6 +220,9 @@ void editorAppendRow(char *s, size_t len) {
 /*** file i/o ***/
 
 void editorOpen(char *filename) {
+  free(E.filename);
+  E.filename = strdup(filename);
+
   FILE *fp = fopen(filename, "r");
   if (!fp) die("fopen");
 
@@ -435,6 +439,7 @@ void initEditor() {
   E.coloff = 0;
   E.numrows = 0;
   E.row = NULL;
+  E.filename = NULL;
 
   if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
   E.screenrows -= 1;

~~~ step: status-bar-left
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -316,7 +316,11 @@ void editorDrawRows(struct abuf *ab) {
 
 void editorDrawStatusBar(struct abuf *ab) {
   abAppend(ab, "\x1b[7m", 4);
-  int len = 0;
+  char status[80];
+  int len = snprintf(status, sizeof(status), "%.20s - %d lines",
+    E.filename ? E.filename : "[No Name]", E.numrows);
+  if (len > E.screencols) len = E.screencols;
+  abAppend(ab, status, len);
   while (len < E.screencols) {
     abAppend(ab, " ", 1);
     len++;

~~~ step: status-bar-right
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -316,14 +316,21 @@ void editorDrawRows(struct abuf *ab) {
 
 void editorDrawStatusBar(struct abuf *ab) {
   abAppend(ab, "\x1b[7m", 4);
-  char status[80];
+  char status[80], rstatus[80];
   int len = snprintf(status, sizeof(status), "%.20s - %d lines",
     E.filename ? E.filename : "[No Name]", E.numrows);
+  int rlen = snprintf(rstatus, sizeof(rstatus), "%d/%d",
+    E.cy + 1, E.numrows);
   if (len > E.screencols) len = E.screencols;
   abAppend(ab, status, len);
   while (len < E.screencols) {
-    abAppend(ab, " ", 1);
-    len++;
+    if (E.screencols - len == rlen) {
+      abAppend(ab, rstatus, rlen);
+      break;
+    } else {
+      abAppend(ab, " ", 1);
+      len++;
+    }
   }
   abAppend(ab, "\x1b[m", 3);
 }

~~~ step: status-message-data
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -11,6 +11,7 @@
 #include <sys/ioctl.h>
 #include <sys/types.h>
 #include <termios.h>
+#include <time.h>
 #include <unistd.h>
 
 /*** defines ***/
@@ -50,6 +51,8 @@ struct editorConfig {
   int numrows;
   erow *row;
   char *filename;
+  char statusmsg[80];
+  time_t statusmsg_time;
   struct termios orig_termios;
 };
 
@@ -451,6 +454,8 @@ void initEditor() {
   E.numrows = 0;
   E.row = NULL;
   E.filename = NULL;
+  E.statusmsg[0] = '\0';
+  E.statusmsg_time = 0;
 
   if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
   E.screenrows -= 1;

~~~ step: set-status-message
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -6,6 +6,7 @@
 
 #include <ctype.h>
 #include <stdio.h>
+#include <stdarg.h>
 #include <stdlib.h>
 #include <string.h>
 #include <sys/ioctl.h>
@@ -360,6 +361,14 @@ void editorRefreshScreen() {
   abFree(&ab);
 }
 
+void editorSetStatusMessage(const char *fmt, ...) {
+  va_list ap;
+  va_start(ap, fmt);
+  vsnprintf(E.statusmsg, sizeof(E.statusmsg), fmt, ap);
+  va_end(ap);
+  E.statusmsg_time = time(NULL);
+}
+
 /*** input ***/
 
 void editorMoveCursor(int key) {
@@ -468,6 +477,8 @@ int main(int argc, char *argv[]) {
     editorOpen(argv[1]);
   }
 
+  editorSetStatusMessage("HELP: Ctrl-Q = quit");
+
   while (1) {
     editorRefreshScreen();
     editorProcessKeypress();

~~~ step: message-bar-make-room
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -337,6 +337,7 @@ void editorDrawStatusBar(struct abuf *ab) {
     }
   }
   abAppend(ab, "\x1b[m", 3);
+  abAppend(ab, "\r\n", 2);
 }
 
 void editorRefreshScreen() {
@@ -467,7 +468,7 @@ void initEditor() {
   E.statusmsg_time = 0;
 
   if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
-  E.screenrows -= 1;
+  E.screenrows -= 2;
 }
 
 int main(int argc, char *argv[]) {

~~~ step: render-message-bar
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -340,6 +340,14 @@ void editorDrawStatusBar(struct abuf *ab) {
   abAppend(ab, "\r\n", 2);
 }
 
+void editorDrawMessageBar(struct abuf *ab) {
+  abAppend(ab, "\x1b[K", 3);
+  int msglen = strlen(E.statusmsg);
+  if (msglen > E.screencols) msglen = E.screencols;
+  if (msglen && time(NULL) - E.statusmsg_time < 5)
+    abAppend(ab, E.statusmsg, msglen);
+}
+
 void editorRefreshScreen() {
   editorScroll();
 
@@ -350,6 +358,7 @@ void editorRefreshScreen() {
 
   editorDrawRows(&ab);
   editorDrawStatusBar(&ab);
+  editorDrawMessageBar(&ab);
 
   char buf[32];
   snprintf(buf, sizeof(buf), "\x1b[%d;%dH", (E.cy - E.rowoff) + 1,

~~~ step: row-insert-char
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -221,6 +221,15 @@ void editorAppendRow(char *s, size_t len) {
   E.numrows++;
 }
 
+void editorRowInsertChar(erow *row, int at, int c) {
+  if (at > row->size) at = row->size;
+  row->chars = realloc(row->chars, row->size + 2);
+  memmove(&row->chars[at + 1], &row->chars[at], row->size - at + 1);
+  row->size++;
+  row->chars[at] = c;
+  editorUpdateRow(row);
+}
+
 /*** file i/o ***/
 
 void editorOpen(char *filename) {

~~~ step: editor-insert-char
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -230,6 +230,16 @@ void editorRowInsertChar(erow *row, int at, int c) {
   editorUpdateRow(row);
 }
 
+/*** editor operations ***/
+
+void editorInsertChar(int c) {
+  if (E.cy == E.numrows) {
+    editorAppendRow("", 0);
+  }
+  editorRowInsertChar(&E.row[E.cy], E.cx, c);
+  E.cx++;
+}
+
 /*** file i/o ***/
 
 void editorOpen(char *filename) {

~~~ step: key-insert-char
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -478,6 +478,10 @@ void editorProcessKeypress() {
     case ARROW_RIGHT:
       editorMoveCursor(c);
       break;
+
+    default:
+      editorInsertChar(c);
+      break;
   }
 }
 

~~~ step: block-special-chars
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -22,6 +22,7 @@
 #define CTRL_KEY(k) ((k) & 0x1f)
 
 enum editorKey {
+  BACKSPACE = 127,
   ARROW_LEFT = 1000,
   ARROW_RIGHT,
   ARROW_UP,
@@ -443,6 +444,10 @@ void editorProcessKeypress() {
   int c = editorReadKey();
 
   switch (c) {
+    case '\r':
+      /* TODO */
+      break;
+
     case CTRL_KEY('q'):
       write(STDOUT_FILENO, "\x1b[2J", 4);
       write(STDOUT_FILENO, "\x1b[H", 3);
@@ -458,6 +463,12 @@ void editorProcessKeypress() {
         E.cx = E.row[E.cy].size;
       break;
 
+    case BACKSPACE:
+    case CTRL_KEY('h'):
+    case DEL_KEY:
+      /* TODO */
+      break;
+
     case PAGE_UP:
     case PAGE_DOWN:
       {
@@ -479,6 +490,10 @@ void editorProcessKeypress() {
       editorMoveCursor(c);
       break;
 
+    case CTRL_KEY('l'):
+    case '\x1b':
+      break;
+
     default:
       editorInsertChar(c);
       break;

~~~ step: rows-to-string
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -243,6 +243,25 @@ void editorInsertChar(int c) {
 
 /*** file i/o ***/
 
+char *editorRowsToString(int *buflen) {
+  int totlen = 0;
+  int j;
+  for (j = 0; j < E.numrows; j++)
+    totlen += E.row[j].size + 1;
+  *buflen = totlen;
+
+  char *buf = malloc(totlen);
+  char *p = buf;
+  for (j = 0; j < E.numrows; j++) {
+    memcpy(p, E.row[j].chars, E.row[j].size);
+    p += E.row[j].size;
+    *p = '\n';
+    p++;
+  }
+
+  return buf;
+}
+
 void editorOpen(char *filename) {
   free(E.filename);
   E.filename = strdup(filename);

~~~ step: editor-save
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -5,6 +5,7 @@
 #define _GNU_SOURCE
 
 #include <ctype.h>
+#include <fcntl.h>
 #include <stdio.h>
 #include <stdarg.h>
 #include <stdlib.h>
@@ -281,6 +282,19 @@ void editorOpen(char *filename) {
   fclose(fp);
 }
 
+void editorSave() {
+  if (E.filename == NULL) return;
+
+  int len;
+  char *buf = editorRowsToString(&len);
+
+  int fd = open(E.filename, O_RDWR | O_CREAT, 0644);
+  ftruncate(fd, len);
+  write(fd, buf, len);
+  close(fd);
+  free(buf);
+}
+
 /*** append buffer ***/
 
 struct abuf {

~~~ step: ctrl-s-save
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -487,6 +487,10 @@ void editorProcessKeypress() {
       exit(0);
       break;
 
+    case CTRL_KEY('s'):
+      editorSave();
+      break;
+
     case HOME_KEY:
       E.cx = 0;
       break;

~~~ step: editor-save-errors
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -289,9 +289,17 @@ void editorSave() {
   char *buf = editorRowsToString(&len);
 
   int fd = open(E.filename, O_RDWR | O_CREAT, 0644);
-  ftruncate(fd, len);
-  write(fd, buf, len);
-  close(fd);
+  if (fd != -1) {
+    if (ftruncate(fd, len) != -1) {
+      if (write(fd, buf, len) == len) {
+        close(fd);
+        free(buf);
+        return;
+      }
+    }
+    close(fd);
+  }
+
   free(buf);
 }
 

~~~ step: save-status-message
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -5,6 +5,7 @@
 #define _GNU_SOURCE
 
 #include <ctype.h>
+#include <errno.h>
 #include <fcntl.h>
 #include <stdio.h>
 #include <stdarg.h>
@@ -294,6 +295,7 @@ void editorSave() {
       if (write(fd, buf, len) == len) {
         close(fd);
         free(buf);
+        editorSetStatusMessage("%d bytes written to disk", len);
         return;
       }
     }
@@ -301,6 +303,7 @@ void editorSave() {
   }
 
   free(buf);
+  editorSetStatusMessage("Can't save! I/O error: %s", strerror(errno));
 }
 
 /*** append buffer ***/
@@ -570,7 +573,7 @@ int main(int argc, char *argv[]) {
     editorOpen(argv[1]);
   }
 
-  editorSetStatusMessage("HELP: Ctrl-Q = quit");
+  editorSetStatusMessage("HELP: Ctrl-S = save | Ctrl-Q = quit");
 
   while (1) {
     editorRefreshScreen();

~~~ step: prototypes
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -62,6 +62,10 @@ struct editorConfig {
 
 struct editorConfig E;
 
+/*** prototypes ***/
+
+void editorSetStatusMessage(const char *fmt, ...);
+
 /*** terminal ***/
 
 void die(const char *s) {

~~~ step: dirty-variable
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -54,6 +54,7 @@ struct editorConfig {
   int screencols;
   int numrows;
   erow *row;
+  int dirty;
   char *filename;
   char statusmsg[80];
   time_t statusmsg_time;
@@ -562,6 +563,7 @@ void initEditor() {
   E.coloff = 0;
   E.numrows = 0;
   E.row = NULL;
+  E.dirty = 0;
   E.filename = NULL;
   E.statusmsg[0] = '\0';
   E.statusmsg_time = 0;

~~~ step: show-dirty
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -390,8 +390,9 @@ void editorDrawRows(struct abuf *ab) {
 void editorDrawStatusBar(struct abuf *ab) {
   abAppend(ab, "\x1b[7m", 4);
   char status[80], rstatus[80];
-  int len = snprintf(status, sizeof(status), "%.20s - %d lines",
-    E.filename ? E.filename : "[No Name]", E.numrows);
+  int len = snprintf(status, sizeof(status), "%.20s - %d lines %s",
+    E.filename ? E.filename : "[No Name]", E.numrows,
+    E.dirty ? "(modified)" : "");
   int rlen = snprintf(rstatus, sizeof(rstatus), "%d/%d",
     E.cy + 1, E.numrows);
   if (len > E.screencols) len = E.screencols;

~~~ step: increment-dirty
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -227,6 +227,7 @@ void editorAppendRow(char *s, size_t len) {
   editorUpdateRow(&E.row[at]);
 
   E.numrows++;
+  E.dirty++;
 }
 
 void editorRowInsertChar(erow *row, int at, int c) {
@@ -236,6 +237,7 @@ void editorRowInsertChar(erow *row, int at, int c) {
   row->size++;
   row->chars[at] = c;
   editorUpdateRow(row);
+  E.dirty++;
 }
 
 /*** editor operations ***/

~~~ step: reset-dirty
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -288,6 +288,7 @@ void editorOpen(char *filename) {
   }
   free(line);
   fclose(fp);
+  E.dirty = 0;
 }
 
 void editorSave() {
@@ -302,6 +303,7 @@ void editorSave() {
       if (write(fd, buf, len) == len) {
         close(fd);
         free(buf);
+        E.dirty = 0;
         editorSetStatusMessage("%d bytes written to disk", len);
         return;
       }

~~~ step: quit-confirmation
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -20,6 +20,7 @@
 /*** defines ***/
 
 #define KILO_VERSION "0.0.1"
+#define KILO_QUIT_TIMES 3
 
 #define CTRL_KEY(k) ((k) & 0x1f)
 
@@ -495,6 +496,8 @@ void editorMoveCursor(int key) {
 }
 
 void editorProcessKeypress() {
+  static int quit_times = KILO_QUIT_TIMES;
+
   int c = editorReadKey();
 
   switch (c) {
@@ -503,6 +506,12 @@ void editorProcessKeypress() {
       break;
 
     case CTRL_KEY('q'):
+      if (E.dirty && quit_times > 0) {
+        editorSetStatusMessage("WARNING!!! File has unsaved changes. "
+          "Press Ctrl-Q %d more times to quit.", quit_times);
+        quit_times--;
+        return;
+      }
       write(STDOUT_FILENO, "\x1b[2J", 4);
       write(STDOUT_FILENO, "\x1b[H", 3);
       exit(0);
@@ -556,6 +565,8 @@ void editorProcessKeypress() {
       editorInsertChar(c);
       break;
   }
+
+  quit_times = KILO_QUIT_TIMES;
 }
 
 /*** init ***/

~~~ step: row-del-char
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -241,6 +241,14 @@ void editorRowInsertChar(erow *row, int at, int c) {
   E.dirty++;
 }
 
+void editorRowDelChar(erow *row, int at) {
+  if (at >= row->size) return;
+  memmove(&row->chars[at], &row->chars[at + 1], row->size - at);
+  row->size--;
+  editorUpdateRow(row);
+  E.dirty++;
+}
+
 /*** editor operations ***/
 
 void editorInsertChar(int c) {

~~~ step: editor-del-char
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -259,6 +259,16 @@ void editorInsertChar(int c) {
   E.cx++;
 }
 
+void editorDelChar() {
+  if (E.cy == E.numrows) return;
+
+  erow *row = &E.row[E.cy];
+  if (E.cx > 0) {
+    editorRowDelChar(row, E.cx - 1);
+    E.cx--;
+  }
+}
+
 /*** file i/o ***/
 
 char *editorRowsToString(int *buflen) {

~~~ step: key-del-char
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -551,7 +551,8 @@ void editorProcessKeypress() {
     case BACKSPACE:
     case CTRL_KEY('h'):
     case DEL_KEY:
-      /* TODO */
+      if (c == DEL_KEY) editorMoveCursor(ARROW_RIGHT);
+      editorDelChar();
       break;
 
     case PAGE_UP:

~~~ step: del-row
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -231,6 +231,19 @@ void editorAppendRow(char *s, size_t len) {
   E.dirty++;
 }
 
+void editorFreeRow(erow *row) {
+  free(row->render);
+  free(row->chars);
+}
+
+void editorDelRow(int at) {
+  if (at >= E.numrows) return;
+  editorFreeRow(&E.row[at]);
+  memmove(&E.row[at], &E.row[at + 1], sizeof(erow) * (E.numrows - at - 1));
+  E.numrows--;
+  E.dirty++;
+}
+
 void editorRowInsertChar(erow *row, int at, int c) {
   if (at > row->size) at = row->size;
   row->chars = realloc(row->chars, row->size + 2);

~~~ step: row-append-string
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -254,6 +254,15 @@ void editorRowInsertChar(erow *row, int at, int c) {
   E.dirty++;
 }
 
+void editorRowAppendString(erow *row, char *s, size_t len) {
+  row->chars = realloc(row->chars, row->size + len + 1);
+  memcpy(&row->chars[row->size], s, len);
+  row->size += len;
+  row->chars[row->size] = '\0';
+  editorUpdateRow(row);
+  E.dirty++;
+}
+
 void editorRowDelChar(erow *row, int at) {
   if (at >= row->size) return;
   memmove(&row->chars[at], &row->chars[at + 1], row->size - at);

~~~ step: del-char-row
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -283,11 +283,17 @@ void editorInsertChar(int c) {
 
 void editorDelChar() {
   if (E.cy == E.numrows) return;
+  if (E.cx == 0 && E.cy == 0) return;
 
   erow *row = &E.row[E.cy];
   if (E.cx > 0) {
     editorRowDelChar(row, E.cx - 1);
     E.cx--;
+  } else {
+    E.cx = E.row[E.cy - 1].size;
+    editorRowAppendString(&E.row[E.cy - 1], row->chars, row->size);
+    editorDelRow(E.cy);
+    E.cy--;
   }
 }
 

~~~ step: append-row-to-insert
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -214,10 +214,12 @@ void editorUpdateRow(erow *row) {
   row->rsize = idx;
 }
 
-void editorAppendRow(char *s, size_t len) {
-  E.row = realloc(E.row, sizeof(erow) * (E.numrows + 1));
+void editorInsertRow(int at, char *s, size_t len) {
+  if (at > E.numrows) return;
+
+  E.row = realloc(E.row, sizeof(erow) * (E.numrows + 1));
+  memmove(&E.row[at + 1], &E.row[at], sizeof(erow) * (E.numrows - at));
 
-  int at = E.numrows;
   E.row[at].size = len;
   E.row[at].chars = malloc(len + 1);
   memcpy(E.row[at].chars, s, len);

~~~ step: use-insert-row
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -277,7 +277,7 @@ void editorRowDelChar(erow *row, int at) {
 
 void editorInsertChar(int c) {
   if (E.cy == E.numrows) {
-    editorAppendRow("", 0);
+    editorInsertRow(E.numrows, "", 0);
   }
   editorRowInsertChar(&E.row[E.cy], E.cx, c);
   E.cx++;
@@ -333,7 +333,7 @@ void editorOpen(char *filename) {
   while ((linelen = getline(&line, &linecap, fp)) != -1) {
     if (linelen > 0 && (line[linelen - 1] == '\n' || line[linelen - 1] == '\r'))
       linelen--;
-    editorAppendRow(line, linelen);
+    editorInsertRow(E.numrows, line, linelen);
   }
   free(line);
   fclose(fp);

~~~ step: insert-newline
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -283,6 +283,21 @@ void editorInsertChar(int c) {
   E.cx++;
 }
 
+void editorInsertNewline() {
+  if (E.cx == 0) {
+    editorInsertRow(E.cy, "", 0);
+  } else {
+    erow *row = &E.row[E.cy];
+    editorInsertRow(E.cy + 1, &row->chars[E.cx], row->size - E.cx);
+    row = &E.row[E.cy];
+    row->size = E.cx;
+    row->chars[row->size] = '\0';
+    editorUpdateRow(row);
+  }
+  E.cy++;
+  E.cx = 0;
+}
+
 void editorDelChar() {
   if (E.cy == E.numrows) return;
   if (E.cx == 0 && E.cy == 0) return;

~~~ step: enter-key
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -565,7 +565,7 @@ void editorProcessKeypress() {
 
   switch (c) {
     case '\r':
-      /* TODO */
+      editorInsertNewline();
       break;
 
     case CTRL_KEY('q'):

~~~ step: editor-prompt
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -67,6 +67,7 @@ struct editorConfig E;
 /*** prototypes ***/
 
 void editorSetStatusMessage(const char *fmt, ...);
+void editorRefreshScreen();
 
 /*** terminal ***/
 
@@ -519,6 +520,34 @@ void editorSetStatusMessage(const char *fmt, ...) {
 
 /*** input ***/
 
+char *editorPrompt(char *prompt) {
+  size_t bufsize = 128;
+  char *buf = malloc(bufsize);
+
+  size_t buflen = 0;
+  buf[0] = '\0';
+
+  while (1) {
+    editorSetStatusMessage(prompt, buf);
+    editorRefreshScreen();
+
+    int c = editorReadKey();
+    if (c == '\r') {
+      if (buflen != 0) {
+        editorSetStatusMessage("");
+        return buf;
+      }
+    } else if (isprint(c)) {
+      if (buflen == bufsize - 1) {
+        bufsize *= 2;
+        buf = realloc(buf, bufsize);
+      }
+      buf[buflen++] = c;
+      buf[buflen] = '\0';
+    }
+  }
+}
+
 void editorMoveCursor(int key) {
   erow *row = (E.cy >= E.numrows) ? NULL : &E.row[E.cy];
 

~~~ step: save-as
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -68,6 +68,7 @@ struct editorConfig E;
 
 void editorSetStatusMessage(const char *fmt, ...);
 void editorRefreshScreen();
+char *editorPrompt(char *prompt);
 
 /*** terminal ***/
 
@@ -357,7 +358,9 @@ void editorOpen(char *filename) {
 }
 
 void editorSave() {
-  if (E.filename == NULL) return;
+  if (E.filename == NULL) {
+    E.filename = editorPrompt("Save as: %s");
+  }
 
   int len;
   char *buf = editorRowsToString(&len);

~~~ step: editor-prompt-escape
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -535,7 +535,11 @@ char *editorPrompt(char *prompt) {
     editorRefreshScreen();
 
     int c = editorReadKey();
-    if (c == '\r') {
+    if (c == '\x1b') {
+      editorSetStatusMessage("");
+      free(buf);
+      return NULL;
+    } else if (c == '\r') {
       if (buflen != 0) {
         editorSetStatusMessage("");
         return buf;

~~~ step: abort-save
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -359,7 +359,11 @@ void editorOpen(char *filename) {
 
 void editorSave() {
   if (E.filename == NULL) {
-    E.filename = editorPrompt("Save as: %s");
+    E.filename = editorPrompt("Save as: %s (ESC to cancel)");
+    if (E.filename == NULL) {
+      editorSetStatusMessage("Save aborted");
+      return;
+    }
   }
 
   int len;

~~~ step: prompt-backspace
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -539,7 +539,9 @@ char *editorPrompt(char *prompt) {
     editorRefreshScreen();
 
     int c = editorReadKey();
-    if (c == '\x1b') {
+    if (c == DEL_KEY || c == CTRL_KEY('h') || c == BACKSPACE) {
+      if (buflen != 0) buf[--buflen] = '\0';
+    } else if (c == '\x1b') {
       editorSetStatusMessage("");
       free(buf);
       return NULL;

~~~ step: basic-search
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -387,6 +387,27 @@ void editorSave() {
   editorSetStatusMessage("Can't save! I/O error: %s", strerror(errno));
 }
 
+/*** find ***/
+
+void editorFind() {
+  char *query = editorPrompt("Search: %s (ESC to cancel)");
+  if (query == NULL) return;
+
+  int i;
+  for (i = 0; i < E.numrows; i++) {
+    erow *row = &E.row[i];
+    char *match = strstr(row->render, query);
+    if (match) {
+      E.cy = i;
+      E.cx = match - row->render;
+      E.rowoff = E.numrows;
+      break;
+    }
+  }
+
+  free(query);
+}
+
 /*** append buffer ***/
 
 struct abuf {

~~~ step: rx-to-cx
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -194,6 +194,19 @@ int editorRowCxToRx(erow *row, int cx) {
   return rx;
 }
 
+int editorRowRxToCx(erow *row, int rx) {
+  int cur_rx = 0;
+  int cx;
+  for (cx = 0; cx < row->size; cx++) {
+    if (row->chars[cx] == '\t')
+      cur_rx += 7 - (cur_rx % 8);
+    cur_rx++;
+
+    if (cur_rx > rx) return cx;
+  }
+  return cx;
+}
+
 void editorUpdateRow(erow *row) {
   int tabs = 0;
   int j;

~~~ step: call-rx-to-cx
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -412,7 +412,7 @@ void editorFind() {
     char *match = strstr(row->render, query);
     if (match) {
       E.cy = i;
-      E.cx = match - row->render;
+      E.cx = editorRowRxToCx(row, match - row->render);
       E.rowoff = E.numrows;
       break;
     }

~~~ step: basic-search-key
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -669,6 +669,10 @@ void editorProcessKeypress() {
         E.cx = E.row[E.cy].size;
       break;
 
+    case CTRL_KEY('f'):
+      editorFind();
+      break;
+
     case BACKSPACE:
     case CTRL_KEY('h'):
     case DEL_KEY:
@@ -735,7 +739,8 @@ int main(int argc, char *argv[]) {
     editorOpen(argv[1]);
   }
 
-  editorSetStatusMessage("HELP: Ctrl-S = save | Ctrl-Q = quit");
+  editorSetStatusMessage(
+    "HELP: Ctrl-S = save | Ctrl-Q = quit | Ctrl-F = find");
 
   while (1) {
     editorRefreshScreen();

~~~ step: editor-prompt-callback
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -68,7 +68,7 @@ struct editorConfig E;
 
 void editorSetStatusMessage(const char *fmt, ...);
 void editorRefreshScreen();
-char *editorPrompt(char *prompt);
+char *editorPrompt(char *prompt, void (*callback)(char *, int));
 
 /*** terminal ***/
 
@@ -561,7 +561,7 @@ void editorSetStatusMessage(const char *fmt, ...) {
 
 /*** input ***/
 
-char *editorPrompt(char *prompt) {
+char *editorPrompt(char *prompt, void (*callback)(char *, int)) {
   size_t bufsize = 128;
   char *buf = malloc(bufsize);
 
@@ -577,11 +577,13 @@ char *editorPrompt(char *prompt) {
       if (buflen != 0) buf[--buflen] = '\0';
     } else if (c == '\x1b') {
       editorSetStatusMessage("");
+      if (callback) callback(buf, c);
       free(buf);
       return NULL;
     } else if (c == '\r') {
       if (buflen != 0) {
         editorSetStatusMessage("");
+        if (callback) callback(buf, c);
         return buf;
       }
     } else if (isprint(c)) {
@@ -592,6 +594,8 @@ char *editorPrompt(char *prompt) {
       buf[buflen++] = c;
       buf[buflen] = '\0';
     }
+
+    if (callback) callback(buf, c);
   }
 }
 

~~~ step: null-callback
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -372,7 +372,7 @@ void editorOpen(char *filename) {
 
 void editorSave() {
   if (E.filename == NULL) {
-    E.filename = editorPrompt("Save as: %s (ESC to cancel)");
+    E.filename = editorPrompt("Save as: %s (ESC to cancel)", NULL);
     if (E.filename == NULL) {
       editorSetStatusMessage("Save aborted");
       return;
@@ -403,7 +403,7 @@ void editorSave() {
 /*** find ***/
 
 void editorFind() {
-  char *query = editorPrompt("Search: %s (ESC to cancel)");
+  char *query = editorPrompt("Search: %s (ESC to cancel)", NULL);
   if (query == NULL) return;
 
   int i;

~~~ step: incremental-search
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -402,9 +402,10 @@ void editorSave() {
 
 /*** find ***/
 
-void editorFind() {
-  char *query = editorPrompt("Search: %s (ESC to cancel)", NULL);
-  if (query == NULL) return;
+void editorFindCallback(char *query, int key) {
+  if (key == '\r' || key == '\x1b') {
+    return;
+  }
 
   int i;
   for (i = 0; i < E.numrows; i++) {
@@ -417,8 +418,14 @@ void editorFind() {
       break;
     }
   }
+}
 
-  free(query);
+void editorFind() {
+  char *query = editorPrompt("Search: %s (ESC to cancel)", editorFindCallback);
+
+  if (query) {
+    free(query);
+  }
 }
 
 /*** append buffer ***/

~~~ step: restore-cursor
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -421,10 +421,20 @@ void editorFindCallback(char *query, int key) {
 }
 
 void editorFind() {
+  int saved_cx = E.cx;
+  int saved_cy = E.cy;
+  int saved_coloff = E.coloff;
+  int saved_rowoff = E.rowoff;
+
   char *query = editorPrompt("Search: %s (ESC to cancel)", editorFindCallback);
 
   if (query) {
     free(query);
+  } else {
+    E.cx = saved_cx;
+    E.cy = saved_cy;
+    E.coloff = saved_coloff;
+    E.rowoff = saved_rowoff;
   }
 }
 

~~~ step: search-arrows-statics
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -403,8 +403,20 @@ void editorSave() {
 /*** find ***/
 
 void editorFindCallback(char *query, int key) {
+  static int last_match = -1;
+  static int find_next = 1;
+
   if (key == '\r' || key == '\x1b') {
+    last_match = -1;
+    find_next = 1;
     return;
+  } else if (key == ARROW_RIGHT || key == ARROW_DOWN) {
+    find_next = 1;
+  } else if (key == ARROW_LEFT || key == ARROW_UP) {
+    find_next = -1;
+  } else {
+    last_match = -1;
+    find_next = 1;
   }
 
   int i;

~~~ step: search-arrows
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -419,12 +419,18 @@ void editorFindCallback(char *query, int key) {
     find_next = 1;
   }
 
+  int current = last_match;
   int i;
   for (i = 0; i < E.numrows; i++) {
-    erow *row = &E.row[i];
+    current += find_next;
+    if (current == -1) current = E.numrows - 1;
+    else if (current == E.numrows) current = 0;
+
+    erow *row = &E.row[current];
     char *match = strstr(row->render, query);
     if (match) {
-      E.cy = i;
+      last_match = current;
+      E.cy = current;
       E.cx = editorRowRxToCx(row, match - row->render);
       E.rowoff = E.numrows;
       break;

~~~ step: search-arrows-help
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -444,7 +444,8 @@ void editorFind() {
   int saved_coloff = E.coloff;
   int saved_rowoff = E.rowoff;
 
-  char *query = editorPrompt("Search: %s (ESC to cancel)", editorFindCallback);
+  char *query = editorPrompt("Search: %s (Use ESC/Arrows/Enter)",
+                             editorFindCallback);
 
   if (query) {
     free(query);

~~~ step: syntax-digits
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -525,7 +525,17 @@ void editorDrawRows(struct abuf *ab) {
       int len = E.row[filerow].rsize - E.coloff;
       if (len < 0) len = 0;
       if (len > E.screencols) len = E.screencols;
-      abAppend(ab, &E.row[filerow].render[E.coloff], len);
+      char *c = &E.row[filerow].render[E.coloff];
+      int j;
+      for (j = 0; j < len; j++) {
+        if (isdigit(c[j])) {
+          abAppend(ab, "\x1b[31m", 5);
+          abAppend(ab, &c[j], 1);
+          abAppend(ab, "\x1b[39m", 5);
+        } else {
+          abAppend(ab, &c[j], 1);
+        }
+      }
     }
 
     abAppend(ab, "\x1b[K", 3);

~~~ step: syntax-refactoring-hl
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -44,6 +44,7 @@ typedef struct erow {
   int rsize;
   char *chars;
   char *render;
+  unsigned char *hl;
 } erow;
 
 struct editorConfig {
@@ -242,6 +243,7 @@ void editorInsertRow(int at, char *s, size_t len) {
 
   E.row[at].rsize = 0;
   E.row[at].render = NULL;
+  E.row[at].hl = NULL;
   editorUpdateRow(&E.row[at]);
 
   E.numrows++;
@@ -251,6 +253,7 @@ void editorInsertRow(int at, char *s, size_t len) {
 void editorFreeRow(erow *row) {
   free(row->render);
   free(row->chars);
+  free(row->hl);
 }
 
 void editorDelRow(int at) {

~~~ step: highlight-enum
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -37,6 +37,11 @@ enum editorKey {
   PAGE_DOWN
 };
 
+enum editorHighlight {
+  HL_NORMAL = 0,
+  HL_NUMBER
+};
+
 /*** data ***/
 
 typedef struct erow {

~~~ step: editor-update-syntax
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -187,6 +187,20 @@ int getWindowSize(int *rows, int *cols) {
   }
 }
 
+/*** syntax highlighting ***/
+
+void editorUpdateSyntax(erow *row) {
+  row->hl = realloc(row->hl, row->rsize);
+  memset(row->hl, HL_NORMAL, row->rsize);
+
+  int i;
+  for (i = 0; i < row->rsize; i++) {
+    if (isdigit(row->render[i])) {
+      row->hl[i] = HL_NUMBER;
+    }
+  }
+}
+
 /*** row operations ***/
 
 int editorRowCxToRx(erow *row, int cx) {

~~~ step: call-update-syntax
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -247,6 +247,8 @@ void editorUpdateRow(erow *row) {
   }
   row->render[idx] = '\0';
   row->rsize = idx;
+
+  editorUpdateSyntax(row);
 }
 
 void editorInsertRow(int at, char *s, size_t len) {

~~~ step: editor-syntax-to-color
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -201,6 +201,13 @@ void editorUpdateSyntax(erow *row) {
   }
 }
 
+int editorSyntaxToColor(int hl) {
+  switch (hl) {
+    case HL_NUMBER: return 31;
+    default: return 37;
+  }
+}
+
 /*** row operations ***/
 
 int editorRowCxToRx(erow *row, int cx) {

~~~ step: render-hl
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -557,16 +557,21 @@ void editorDrawRows(struct abuf *ab) {
       if (len < 0) len = 0;
       if (len > E.screencols) len = E.screencols;
       char *c = &E.row[filerow].render[E.coloff];
+      unsigned char *hl = &E.row[filerow].hl[E.coloff];
       int j;
       for (j = 0; j < len; j++) {
-        if (isdigit(c[j])) {
-          abAppend(ab, "\x1b[31m", 5);
-          abAppend(ab, &c[j], 1);
+        if (hl[j] == HL_NORMAL) {
           abAppend(ab, "\x1b[39m", 5);
+          abAppend(ab, &c[j], 1);
         } else {
+          int color = editorSyntaxToColor(hl[j]);
+          char buf[16];
+          int clen = snprintf(buf, sizeof(buf), "\x1b[%dm", color);
+          abAppend(ab, buf, clen);
           abAppend(ab, &c[j], 1);
         }
       }
+      abAppend(ab, "\x1b[39m", 5);
     }
 
     abAppend(ab, "\x1b[K", 3);

~~~ step: current-color
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -558,16 +558,23 @@ void editorDrawRows(struct abuf *ab) {
       if (len > E.screencols) len = E.screencols;
       char *c = &E.row[filerow].render[E.coloff];
       unsigned char *hl = &E.row[filerow].hl[E.coloff];
+      int current_color = -1;
       int j;
       for (j = 0; j < len; j++) {
         if (hl[j] == HL_NORMAL) {
-          abAppend(ab, "\x1b[39m", 5);
+          if (current_color != -1) {
+            abAppend(ab, "\x1b[39m", 5);
+            current_color = -1;
+          }
           abAppend(ab, &c[j], 1);
         } else {
           int color = editorSyntaxToColor(hl[j]);
-          char buf[16];
-          int clen = snprintf(buf, sizeof(buf), "\x1b[%dm", color);
-          abAppend(ab, buf, clen);
+          if (color != current_color) {
+            current_color = color;
+            char buf[16];
+            int clen = snprintf(buf, sizeof(buf), "\x1b[%dm", color);
+            abAppend(ab, buf, clen);
+          }
           abAppend(ab, &c[j], 1);
         }
       }

~~~ step: hl-match
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -39,7 +39,8 @@ enum editorKey {
 
 enum editorHighlight {
   HL_NORMAL = 0,
-  HL_NUMBER
+  HL_NUMBER,
+  HL_MATCH
 };
 
 /*** data ***/
@@ -204,6 +205,7 @@ void editorUpdateSyntax(erow *row) {
 int editorSyntaxToColor(int hl) {
   switch (hl) {
     case HL_NUMBER: return 31;
+    case HL_MATCH: return 34;
     default: return 37;
   }
 }

~~~ step: search-highlighting
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -466,6 +466,8 @@ void editorFindCallback(char *query, int key) {
       E.cy = current;
       E.cx = editorRowRxToCx(row, match - row->render);
       E.rowoff = E.numrows;
+
+      memset(&row->hl[match - row->render], HL_MATCH, strlen(query));
       break;
     }
   }

~~~ step: restore-search-highlight
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -439,6 +439,15 @@ void editorFindCallback(char *query, int key) {
   static int last_match = -1;
   static int find_next = 1;
 
+  static int saved_hl_line;
+  static char *saved_hl = NULL;
+
+  if (saved_hl) {
+    memcpy(E.row[saved_hl_line].hl, saved_hl, E.row[saved_hl_line].rsize);
+    free(saved_hl);
+    saved_hl = NULL;
+  }
+
   if (key == '\r' || key == '\x1b') {
     last_match = -1;
     find_next = 1;
@@ -467,6 +476,9 @@ void editorFindCallback(char *query, int key) {
       E.cx = editorRowRxToCx(row, match - row->render);
       E.rowoff = E.numrows;
 
+      saved_hl_line = current;
+      saved_hl = malloc(row->rsize);
+      memcpy(saved_hl, row->hl, row->rsize);
       memset(&row->hl[match - row->render], HL_MATCH, strlen(query));
       break;
     }

~~~ step: syntax-numbers-while
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -194,11 +194,15 @@ void editorUpdateSyntax(erow *row) {
   row->hl = realloc(row->hl, row->rsize);
   memset(row->hl, HL_NORMAL, row->rsize);
 
-  int i;
-  for (i = 0; i < row->rsize; i++) {
-    if (isdigit(row->render[i])) {
+  int i = 0;
+  while (i < row->rsize) {
+    char c = row->render[i];
+
+    if (isdigit(c)) {
       row->hl[i] = HL_NUMBER;
     }
+
+    i++;
   }
 }
 

~~~ step: is-separator
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -190,6 +190,10 @@ int getWindowSize(int *rows, int *cols) {
 
 /*** syntax highlighting ***/
 
+int is_separator(int c) {
+  return isspace(c) || c == '\0' || strchr(",.()+-/*=~%<>[];", c) != NULL;
+}
+
 void editorUpdateSyntax(erow *row) {
   row->hl = realloc(row->hl, row->rsize);
   memset(row->hl, HL_NORMAL, row->rsize);

~~~ step: prev-sep
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -198,14 +198,21 @@ void editorUpdateSyntax(erow *row) {
   row->hl = realloc(row->hl, row->rsize);
   memset(row->hl, HL_NORMAL, row->rsize);
 
+  int prev_sep = 1;
+
   int i = 0;
   while (i < row->rsize) {
     char c = row->render[i];
+    unsigned char prev_hl = (i > 0) ? row->hl[i - 1] : HL_NORMAL;
 
-    if (isdigit(c)) {
+    if (isdigit(c) && (prev_sep || prev_hl == HL_NUMBER)) {
       row->hl[i] = HL_NUMBER;
+      i++;
+      prev_sep = 0;
+      continue;
     }
 
+    prev_sep = is_separator(c);
     i++;
   }
 }

~~~ step: syntax-numbers-decimal-point
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -205,7 +205,8 @@ void editorUpdateSyntax(erow *row) {
     char c = row->render[i];
     unsigned char prev_hl = (i > 0) ? row->hl[i - 1] : HL_NORMAL;
 
-    if (isdigit(c) && (prev_sep || prev_hl == HL_NUMBER)) {
+    if ((isdigit(c) && (prev_sep || prev_hl == HL_NUMBER)) ||
+        (c == '.' && prev_hl == HL_NUMBER)) {
       row->hl[i] = HL_NUMBER;
       i++;
       prev_sep = 0;

~~~ step: editor-syntax
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -43,8 +43,16 @@ enum editorHighlight {
   HL_MATCH
 };
 
+#define HL_HIGHLIGHT_NUMBERS (1<<0)
+
 /*** data ***/
 
+struct editorSyntax {
+  char *filetype;
+  char **filematch;
+  int flags;
+};
+
 typedef struct erow {
   int size;
   int rsize;

~~~ step: hldb
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -79,6 +79,20 @@ struct editorConfig {
 
 struct editorConfig E;
 
+/*** filetypes ***/
+
+char *C_HL_extensions[] = { ".c", ".h", ".cpp", NULL };
+
+struct editorSyntax HLDB[] = {
+  {
+    "c",
+    C_HL_extensions,
+    HL_HIGHLIGHT_NUMBERS
+  },
+};
+
+#define HLDB_ENTRIES (sizeof(HLDB) / sizeof(HLDB[0]))
+
 /*** prototypes ***/
 
 void editorSetStatusMessage(const char *fmt, ...);

~~~ step: e-syntax
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -74,6 +74,7 @@ struct editorConfig {
   char *filename;
   char statusmsg[80];
   time_t statusmsg_time;
+  struct editorSyntax *syntax;
   struct termios orig_termios;
 };
 
@@ -874,6 +875,7 @@ void initEditor() {
   E.filename = NULL;
   E.statusmsg[0] = '\0';
   E.statusmsg_time = 0;
+  E.syntax = NULL;
 
   if (getWindowSize(&E.screenrows, &E.screencols) == -1) die("getWindowSize");
   E.screenrows -= 2;

~~~ step: show-filetype
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -647,8 +647,8 @@ void editorDrawStatusBar(struct abuf *ab) {
   int len = snprintf(status, sizeof(status), "%.20s - %d lines %s",
     E.filename ? E.filename : "[No Name]", E.numrows,
     E.dirty ? "(modified)" : "");
-  int rlen = snprintf(rstatus, sizeof(rstatus), "%d/%d",
-    E.cy + 1, E.numrows);
+  int rlen = snprintf(rstatus, sizeof(rstatus), "%s | %d/%d",
+    E.syntax ? E.syntax->filetype : "no ft", E.cy + 1, E.numrows);
   if (len > E.screencols) len = E.screencols;
   abAppend(ab, status, len);
   while (len < E.screencols) {

~~~ step: update-syntax-filetype
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -221,6 +221,8 @@ void editorUpdateSyntax(erow *row) {
   row->hl = realloc(row->hl, row->rsize);
   memset(row->hl, HL_NORMAL, row->rsize);
 
+  if (E.syntax == NULL) return;
+
   int prev_sep = 1;
 
   int i = 0;
@@ -228,12 +230,14 @@ void editorUpdateSyntax(erow *row) {
     char c = row->render[i];
     unsigned char prev_hl = (i > 0) ? row->hl[i - 1] : HL_NORMAL;
 
-    if ((isdigit(c) && (prev_sep || prev_hl == HL_NUMBER)) ||
-        (c == '.' && prev_hl == HL_NUMBER)) {
-      row->hl[i] = HL_NUMBER;
-      i++;
-      prev_sep = 0;
-      continue;
+    if (E.syntax->flags & HL_HIGHLIGHT_NUMBERS) {
+      if ((isdigit(c) && (prev_sep || prev_hl == HL_NUMBER)) ||
+          (c == '.' && prev_hl == HL_NUMBER)) {
+        row->hl[i] = HL_NUMBER;
+        i++;
+        prev_sep = 0;
+        continue;
+      }
     }
 
     prev_sep = is_separator(c);

~~~ step: select-syntax-highlight
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -253,6 +253,27 @@ int editorSyntaxToColor(int hl) {
   }
 }
 
+void editorSelectSyntaxHighlight() {
+  E.syntax = NULL;
+  if (E.filename == NULL) return;
+
+  for (unsigned int j = 0; j < HLDB_ENTRIES; j++) {
+    struct editorSyntax *s = &HLDB[j];
+    unsigned int i = 0;
+    while (s->filematch[i]) {
+      char *p = strstr(E.filename, s->filematch[i]);
+      if (p != NULL) {
+        int patlen = strlen(s->filematch[i]);
+        if (s->filematch[i][0] != '.' || p[patlen] == '\0') {
+          E.syntax = s;
+          return;
+        }
+      }
+      i++;
+    }
+  }
+}
+
 /*** row operations ***/
 
 int editorRowCxToRx(erow *row, int cx) {

~~~ step: call-select-syntax-highlight
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -451,6 +451,8 @@ void editorOpen(char *filename) {
   free(E.filename);
   E.filename = strdup(filename);
 
+  editorSelectSyntaxHighlight();
+
   FILE *fp = fopen(filename, "r");
   if (!fp) die("fopen");
 
@@ -474,6 +476,7 @@ void editorSave() {
       editorSetStatusMessage("Save aborted");
       return;
     }
+    editorSelectSyntaxHighlight();
   }
 
   int len;

~~~ step: filetype-save-as
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -266,6 +266,12 @@ void editorSelectSyntaxHighlight() {
         int patlen = strlen(s->filematch[i]);
         if (s->filematch[i][0] != '.' || p[patlen] == '\0') {
           E.syntax = s;
+
+          int filerow;
+          for (filerow = 0; filerow < E.numrows; filerow++) {
+            editorUpdateSyntax(&E.row[filerow]);
+          }
+
           return;
         }
       }

~~~ step: hl-string
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -39,6 +39,7 @@ enum editorKey {
 
 enum editorHighlight {
   HL_NORMAL = 0,
+  HL_STRING,
   HL_NUMBER,
   HL_MATCH
 };
@@ -247,6 +248,7 @@ void editorUpdateSyntax(erow *row) {
 
 int editorSyntaxToColor(int hl) {
   switch (hl) {
+    case HL_STRING: return 35;
     case HL_NUMBER: return 31;
     case HL_MATCH: return 34;
     default: return 37;

~~~ step: hl-string-flag
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -45,6 +45,7 @@ enum editorHighlight {
 };
 
 #define HL_HIGHLIGHT_NUMBERS (1<<0)
+#define HL_HIGHLIGHT_STRINGS (1<<1)
 
 /*** data ***/
 
@@ -89,7 +90,7 @@ struct editorSyntax HLDB[] = {
   {
     "c",
     C_HL_extensions,
-    HL_HIGHLIGHT_NUMBERS
+    HL_HIGHLIGHT_NUMBERS | HL_HIGHLIGHT_STRINGS
   },
 };
 

~~~ step: syntax-strings
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -226,12 +226,30 @@ void editorUpdateSyntax(erow *row) {
   if (E.syntax == NULL) return;
 
   int prev_sep = 1;
+  int in_string = 0;
 
   int i = 0;
   while (i < row->rsize) {
     char c = row->render[i];
     unsigned char prev_hl = (i > 0) ? row->hl[i - 1] : HL_NORMAL;
 
+    if (E.syntax->flags & HL_HIGHLIGHT_STRINGS) {
+      if (in_string) {
+        row->hl[i] = HL_STRING;
+        if (c == in_string) in_string = 0;
+        i++;
+        continue;
+      } else {
+        if (c == '"' || c == '\'') {
+          in_string = c;
+          row->hl[i] = HL_STRING;
+          i++;
+          prev_sep = 0;
+          continue;
+        }
+      }
+    }
+
     if (E.syntax->flags & HL_HIGHLIGHT_NUMBERS) {
       if ((isdigit(c) && (prev_sep || prev_hl == HL_NUMBER)) ||
           (c == '.' && prev_hl == HL_NUMBER)) {

~~~ step: syntax-string-escapes
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -236,6 +236,12 @@ void editorUpdateSyntax(erow *row) {
     if (E.syntax->flags & HL_HIGHLIGHT_STRINGS) {
       if (in_string) {
         row->hl[i] = HL_STRING;
+        if (c == '\\' && i + 1 < row->rsize) {
+          row->hl[i + 1] = HL_STRING;
+          i += 2;
+          prev_sep = 0;
+          continue;
+        }
         if (c == in_string) in_string = 0;
         i++;
         continue;

~~~ step: hl-comment
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -39,6 +39,7 @@ enum editorKey {
 
 enum editorHighlight {
   HL_NORMAL = 0,
+  HL_COMMENT,
   HL_STRING,
   HL_NUMBER,
   HL_MATCH
@@ -273,6 +274,7 @@ void editorUpdateSyntax(erow *row) {
 
 int editorSyntaxToColor(int hl) {
   switch (hl) {
+    case HL_COMMENT: return 36;
     case HL_STRING: return 35;
     case HL_NUMBER: return 31;
     case HL_MATCH: return 34;

~~~ step: scs
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -53,6 +53,7 @@ enum editorHighlight {
 struct editorSyntax {
   char *filetype;
   char **filematch;
+  char *singleline_comment_start;
   int flags;
 };
 
@@ -91,6 +92,7 @@ struct editorSyntax HLDB[] = {
   {
     "c",
     C_HL_extensions,
+    "//",
     HL_HIGHLIGHT_NUMBERS | HL_HIGHLIGHT_STRINGS
   },
 };

~~~ step: syntax-comments
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -228,6 +228,9 @@ void editorUpdateSyntax(erow *row) {
 
   if (E.syntax == NULL) return;
 
+  char *scs = E.syntax->singleline_comment_start;
+  int scs_len = scs ? strlen(scs) : 0;
+
   int prev_sep = 1;
   int in_string = 0;
 
@@ -236,6 +239,13 @@ void editorUpdateSyntax(erow *row) {
     char c = row->render[i];
     unsigned char prev_hl = (i > 0) ? row->hl[i - 1] : HL_NORMAL;
 
+    if (scs_len && !in_string) {
+      if (prev_sep && !strncmp(&row->render[i], scs, scs_len)) {
+        memset(&row->hl[i], HL_COMMENT, row->rsize - i);
+        return;
+      }
+    }
+
     if (E.syntax->flags & HL_HIGHLIGHT_STRINGS) {
       if (in_string) {
         row->hl[i] = HL_STRING;

~~~ step: hl-keywords
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -40,6 +40,8 @@ enum editorKey {
 enum editorHighlight {
   HL_NORMAL = 0,
   HL_COMMENT,
+  HL_KEYWORD1,
+  HL_KEYWORD2,
   HL_STRING,
   HL_NUMBER,
   HL_MATCH
@@ -287,6 +289,8 @@ void editorUpdateSyntax(erow *row) {
 int editorSyntaxToColor(int hl) {
   switch (hl) {
     case HL_COMMENT: return 36;
+    case HL_KEYWORD1: return 33;
+    case HL_KEYWORD2: return 32;
     case HL_STRING: return 35;
     case HL_NUMBER: return 31;
     case HL_MATCH: return 34;

~~~ step: c-keywords
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -55,6 +55,7 @@ enum editorHighlight {
 struct editorSyntax {
   char *filetype;
   char **filematch;
+  char **keywords;
   char *singleline_comment_start;
   int flags;
 };
@@ -89,11 +90,19 @@ struct editorConfig E;
 /*** filetypes ***/
 
 char *C_HL_extensions[] = { ".c", ".h", ".cpp", NULL };
+char *C_HL_keywords[] = {
+  "switch", "if", "while", "for", "break", "continue", "return", "else",
+  "struct", "union", "typedef", "static", "enum", "class", "case",
+
+  "int|", "long|", "double|", "float|", "char|", "unsigned|", "signed|",
+  "void|", NULL
+};
 
 struct editorSyntax HLDB[] = {
   {
     "c",
     C_HL_extensions,
+    C_HL_keywords,
     "//",
     HL_HIGHLIGHT_NUMBERS | HL_HIGHLIGHT_STRINGS
   },

~~~ step: syntax-keywords
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -239,6 +239,8 @@ void editorUpdateSyntax(erow *row) {
 
   if (E.syntax == NULL) return;
 
+  char **keywords = E.syntax->keywords;
+
   char *scs = E.syntax->singleline_comment_start;
   int scs_len = scs ? strlen(scs) : 0;
 
@@ -290,6 +292,26 @@ void editorUpdateSyntax(erow *row) {
       }
     }
 
+    if (prev_sep) {
+      int j;
+      for (j = 0; keywords[j]; j++) {
+        int klen = strlen(keywords[j]);
+        int kw2 = keywords[j][klen - 1] == '|';
+        if (kw2) klen--;
+
+        if (!strncmp(&row->render[i], keywords[j], klen) &&
+            is_separator(row->render[i + klen])) {
+          memset(&row->hl[i], kw2 ? HL_KEYWORD2 : HL_KEYWORD1, klen);
+          i += klen;
+          break;
+        }
+      }
+      if (keywords[j] != NULL) {
+        prev_sep = 0;
+        continue;
+      }
+    }
+
     prev_sep = is_separator(c);
     i++;
   }

~~~ step: nonprintables
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -726,7 +726,12 @@ void editorDrawRows(struct abuf *ab) {
       int current_color = -1;
       int j;
       for (j = 0; j < len; j++) {
-        if (hl[j] == HL_NORMAL) {
+        if (!isprint(c[j])) {
+          char sym = (c[j] >= 0 && c[j] <= 26) ? '@' + c[j] : '?';
+          abAppend(ab, "\x1b[7m", 4);
+          abAppend(ab, &sym, 1);
+          abAppend(ab, "\x1b[m", 4);
+        } else if (hl[j] == HL_NORMAL) {
           if (current_color != -1) {
             abAppend(ab, "\x1b[39m", 5);
             current_color = -1;

~~~ step: nonprintables-fix-color
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -731,6 +731,11 @@ void editorDrawRows(struct abuf *ab) {
           abAppend(ab, "\x1b[7m", 4);
           abAppend(ab, &sym, 1);
           abAppend(ab, "\x1b[m", 4);
+          if (current_color != -1) {
+            char buf[16];
+            int clen = snprintf(buf, sizeof(buf), "\x1b[%dm", current_color);
+            abAppend(ab, buf, clen);
+          }
         } else if (hl[j] == HL_NORMAL) {
           if (current_color != -1) {
             abAppend(ab, "\x1b[39m", 5);

~~~ step: hl-multiline-comments
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -40,6 +40,7 @@ enum editorKey {
 enum editorHighlight {
   HL_NORMAL = 0,
   HL_COMMENT,
+  HL_MLCOMMENT,
   HL_KEYWORD1,
   HL_KEYWORD2,
   HL_STRING,
@@ -319,7 +320,8 @@ void editorUpdateSyntax(erow *row) {
 
 int editorSyntaxToColor(int hl) {
   switch (hl) {
-    case HL_COMMENT: return 36;
+    case HL_COMMENT:
+    case HL_MLCOMMENT: return 36;
     case HL_KEYWORD1: return 33;
     case HL_KEYWORD2: return 32;
     case HL_STRING: return 35;

~~~ step: mcs-mce
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -58,6 +58,8 @@ struct editorSyntax {
   char **filematch;
   char **keywords;
   char *singleline_comment_start;
+  char *multiline_comment_start;
+  char *multiline_comment_end;
   int flags;
 };
 
@@ -104,7 +106,7 @@ struct editorSyntax HLDB[] = {
     "c",
     C_HL_extensions,
     C_HL_keywords,
-    "//",
+    "//", "/*", "*/",
     HL_HIGHLIGHT_NUMBERS | HL_HIGHLIGHT_STRINGS
   },
 };

~~~ step: mcs-mce-len
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -245,7 +245,12 @@ void editorUpdateSyntax(erow *row) {
   char **keywords = E.syntax->keywords;
 
   char *scs = E.syntax->singleline_comment_start;
+  char *mcs = E.syntax->multiline_comment_start;
+  char *mce = E.syntax->multiline_comment_end;
+
   int scs_len = scs ? strlen(scs) : 0;
+  int mcs_len = mcs ? strlen(mcs) : 0;
+  int mce_len = mce ? strlen(mce) : 0;
 
   int prev_sep = 1;
   int in_string = 0;

~~~ step: syntax-mlcomment
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -254,6 +254,7 @@ void editorUpdateSyntax(erow *row) {
 
   int prev_sep = 1;
   int in_string = 0;
+  int in_comment = 0;
 
   int i = 0;
   while (i < row->rsize) {
@@ -267,6 +268,29 @@ void editorUpdateSyntax(erow *row) {
       }
     }
 
+    if (mcs_len && mce_len && !in_string) {
+      if (in_comment) {
+        row->hl[i] = HL_MLCOMMENT;
+        if (!strncmp(&row->render[i], mce, mce_len)) {
+          memset(&row->hl[i], HL_MLCOMMENT, mce_len);
+          i += mce_len;
+          in_comment = 0;
+          prev_sep = 1;
+          continue;
+        } else {
+          prev_sep = 0;
+          i++;
+          continue;
+        }
+      } else if (!strncmp(&row->render[i], mcs, mcs_len)) {
+        memset(&row->hl[i], HL_MLCOMMENT, mcs_len);
+        i += mcs_len;
+        in_comment = 1;
+        prev_sep = 0;
+        continue;
+      }
+    }
+
     if (E.syntax->flags & HL_HIGHLIGHT_STRINGS) {
       if (in_string) {
         row->hl[i] = HL_STRING;

~~~ step: mlcomment-fix-slcomment-and-strings
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -261,7 +261,7 @@ void editorUpdateSyntax(erow *row) {
     char c = row->render[i];
     unsigned char prev_hl = (i > 0) ? row->hl[i - 1] : HL_NORMAL;
 
-    if (scs_len && !in_string) {
+    if (scs_len && !in_string && !in_comment) {
       if (prev_sep && !strncmp(&row->render[i], scs, scs_len)) {
         memset(&row->hl[i], HL_COMMENT, row->rsize - i);
         return;

~~~ step: idx-and-hloc
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -64,11 +64,13 @@ struct editorSyntax {
 };
 
 typedef struct erow {
+  int idx;
   int size;
   int rsize;
   char *chars;
   char *render;
   unsigned char *hl;
+  int hl_open_comment;
 } erow;
 
 struct editorConfig {
@@ -445,6 +447,8 @@ void editorInsertRow(int at, char *s, size_t len) {
   E.row = realloc(E.row, sizeof(erow) * (E.numrows + 1));
   memmove(&E.row[at + 1], &E.row[at], sizeof(erow) * (E.numrows - at));
 
+  E.row[at].idx = at;
+
   E.row[at].size = len;
   E.row[at].chars = malloc(len + 1);
   memcpy(E.row[at].chars, s, len);
@@ -453,6 +457,7 @@ void editorInsertRow(int at, char *s, size_t len) {
   E.row[at].rsize = 0;
   E.row[at].render = NULL;
   E.row[at].hl = NULL;
+  E.row[at].hl_open_comment = 0;
   editorUpdateRow(&E.row[at]);
 
   E.numrows++;

~~~ step: update-idx
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -446,6 +446,7 @@ void editorInsertRow(int at, char *s, size_t len) {
 
   E.row = realloc(E.row, sizeof(erow) * (E.numrows + 1));
   memmove(&E.row[at + 1], &E.row[at], sizeof(erow) * (E.numrows - at));
+  for (int j = at + 1; j <= E.numrows; j++) E.row[j].idx++;
 
   E.row[at].idx = at;
 
@@ -474,6 +475,7 @@ void editorDelRow(int at) {
   if (at >= E.numrows) return;
   editorFreeRow(&E.row[at]);
   memmove(&E.row[at], &E.row[at + 1], sizeof(erow) * (E.numrows - at - 1));
+  for (int j = at; j < E.numrows - 1; j++) E.row[j].idx--;
   E.numrows--;
   E.dirty++;
 }

~~~ step: propagate-comment
diff --git a/kilo.c b/kilo.c
--- a/kilo.c
+++ b/kilo.c
@@ -256,7 +256,7 @@ void editorUpdateSyntax(erow *row) {
 
   int prev_sep = 1;
   int in_string = 0;
-  int in_comment = 0;
+  int in_comment = (row->idx > 0 && E.row[row->idx - 1].hl_open_comment);
 
   int i = 0;
   while (i < row->rsize) {
@@ -349,6 +349,11 @@ void editorUpdateSyntax(erow *row) {
     prev_sep = is_separator(c);
     i++;
   }
+
+  int changed = (row->hl_open_comment != in_comment);
+  row->hl_open_comment = in_comment;
+  if (changed && row->idx + 1 < E.numrows)
+    editorUpdateSyntax(&E.row[row->idx + 1]);
 }
 
 int editorSyntaxToColor(int hl) {
